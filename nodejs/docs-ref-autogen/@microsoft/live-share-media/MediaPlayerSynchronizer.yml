### YamlMime:TSType
name: MediaPlayerSynchronizer
uid: '@microsoft/live-share-media.MediaPlayerSynchronizer'
package: '@microsoft/live-share-media'
summary: >-
  Synchronizes a local HTML Media Element with a group of remote HTML Media
  Elements.
fullName: MediaPlayerSynchronizer
remarks: >-
  All of an apps transport control commands should be routed through the
  synchronizer. If the

  app is not currently joined to the group media session, the commands will be
  applied directly

  to the local player. When the group session is joined the commands will be
  broadcast to the

  group in addition to being applied to the local player.
isDeprecated: false
type: class
constructors:
  - name: MediaPlayerSynchronizer(IMediaPlayer, EphemeralMediaSession, () => void)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.constructor'
    package: '@microsoft/live-share-media'
    summary: Creates a new `MediaElementSynchronizer` instance.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new MediaPlayerSynchronizer(player: IMediaPlayer, mediaSession:
        EphemeralMediaSession, onEnd: () => void)
      parameters:
        - id: player
          type: <xref uid="@microsoft/live-share-media.IMediaPlayer" />
          description: >-
            Media player element. This can be an HTML Media Element or any
            player that looks like an HTML Media Element.
        - id: mediaSession
          type: <xref uid="@microsoft/live-share-media.EphemeralMediaSession" />
          description: Group MediaSession object being used.
        - id: onEnd
          type: () =&gt; void
          description: >-
            Optional. Function to call when synchronizers `end()` method is
            called.
properties:
  - name: mediaSession
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.mediaSession'
    package: '@microsoft/live-share-media'
    summary: Synchronizers media session.
    fullName: mediaSession
    remarks: ''
    isDeprecated: false
    syntax:
      content: EphemeralMediaSession mediaSession
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.EphemeralMediaSession" />
  - name: player
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.player'
    package: '@microsoft/live-share-media'
    summary: Media player being synchronized.
    fullName: player
    remarks: ''
    isDeprecated: false
    syntax:
      content: IMediaPlayer player
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.IMediaPlayer" />
  - name: viewOnly
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.viewOnly'
    package: '@microsoft/live-share-media'
    summary: If true the client is in a view only mode.
    fullName: viewOnly
    remarks: ''
    isDeprecated: false
    syntax:
      content: boolean viewOnly
      return:
        description: ''
        type: boolean
  - name: volumeLimiter
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.volumeLimiter'
    package: '@microsoft/live-share-media'
    summary: >-
      Volume limiter used to temporarily reduce the videos volume when someone
      speaks in a meeting.
    fullName: volumeLimiter
    remarks: ''
    isDeprecated: false
    syntax:
      content: VolumeLimiter volumeLimiter
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.VolumeLimiter" />
inheritedProperties:
  - name: captureRejections
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.captureRejections'
    package: '@microsoft/live-share-media'
    summary: Sets or gets the default captureRejection value for all emitters.
    fullName: captureRejections
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejections: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.captureRejections
  - name: captureRejectionSymbol
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.captureRejectionSymbol'
    package: '@microsoft/live-share-media'
    summary: ''
    fullName: captureRejectionSymbol
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejectionSymbol: typeof captureRejectionSymbol'
      return:
        description: ''
        type: typeof captureRejectionSymbol
    inheritanceDescription: <b>Inherited From</b> EventEmitter.captureRejectionSymbol
  - name: defaultMaxListeners
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.defaultMaxListeners'
    package: '@microsoft/live-share-media'
    summary: ''
    fullName: defaultMaxListeners
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.defaultMaxListeners
  - name: errorMonitor
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.errorMonitor'
    package: '@microsoft/live-share-media'
    summary: >-
      This symbol shall be used to install a listener for only monitoring
      `'error'`

      events. Listeners installed using this symbol are called before the
      regular

      `'error'` listeners are called.


      Installing a listener using this symbol does not change the behavior once
      an

      `'error'` event is emitted, therefore the process will still crash if no

      regular `'error'` listener is installed.
    fullName: errorMonitor
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static errorMonitor: typeof errorMonitor'
      return:
        description: ''
        type: typeof errorMonitor
    inheritanceDescription: <b>Inherited From</b> EventEmitter.errorMonitor
inheritedMethods:
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.addListener'
    package: '@microsoft/live-share-media'
    summary: Alias for `emitter.on(eventName, listener)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addListener(eventName: string | symbol, listener: (args: any[])
        => void): MediaPlayerSynchronizer
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.addListener
  - name: emit(string | symbol, any[])
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.emit'
    package: '@microsoft/live-share-media'
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.


      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[]): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: any[]
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.emit
  - name: eventNames()
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.eventNames'
    package: '@microsoft/live-share-media'
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.

      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventNames(): (string | symbol)[]'
      return:
        description: ''
        type: (string | symbol)[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.eventNames
  - name: getEventListeners(_DOMEventTarget | EventEmitter, string | symbol)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.getEventListeners'
    package: '@microsoft/live-share-media'
    summary: >-
      Returns a copy of the array of listeners for the event named `eventName`.


      For `EventEmitter`s this behaves exactly the same as calling `.listeners`
      on

      the emitter.


      For `EventTarget`s this is the only way to get the event listeners for the

      event target. This is useful for debugging and diagnostic purposes.


      ```js

      const { getEventListeners, EventEmitter } = require('events');


      {
        const ee = new EventEmitter();
        const listener = () => console.log('Events are fun');
        ee.on('foo', listener);
        getEventListeners(ee, 'foo'); // [listener]
      }

      {
        const et = new EventTarget();
        const listener = () => console.log('Events are fun');
        et.addEventListener('foo', listener);
        getEventListeners(et, 'foo'); // [listener]
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getEventListeners(emitter: _DOMEventTarget |
        EventEmitter, name: string | symbol): Function[]
      parameters:
        - id: emitter
          type: _DOMEventTarget | EventEmitter
          description: ''
        - id: name
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getEventListeners
  - name: getMaxListeners()
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.getMaxListeners'
    package: '@microsoft/live-share-media'
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      [defaultMaxListeners](xref:@microsoft/live-share-media.MediaPlayerSynchronizer.defaultMaxListeners).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: listenerCount(EventEmitter, string | symbol)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.listenerCount'
    package: '@microsoft/live-share-media'
    summary: >-
      A class method that returns the number of listeners for the given
      `eventName`registered on the given `emitter`.


      ```js

      const { EventEmitter, listenerCount } = require('events');

      const myEmitter = new EventEmitter();

      myEmitter.on('event', () => {});

      myEmitter.on('event', () => {});

      console.log(listenerCount(myEmitter, 'event'));

      // Prints: 2

      ```
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Since v3.2.0 - Use `listenerCount` instead.
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter, eventName: string |
        symbol): number
      parameters:
        - id: emitter
          type: EventEmitter
          description: The emitter to query
        - id: eventName
          type: string | symbol
          description: The event name
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listenerCount(string | symbol)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.listenerCount'
    package: '@microsoft/live-share-media'
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol): number'
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event being listened for
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listeners(string | symbol)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.listeners'
    package: '@microsoft/live-share-media'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.

      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listeners
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.off'
    package: '@microsoft/live-share-media'
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void): MediaPlayerSynchronizer
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.off
  - name: on(EventEmitter, string, StaticEventEmitterOptions)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.on'
    package: '@microsoft/live-share-media'
    summary: |-
      ```js
      const { on, EventEmitter } = require('events');

      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo')) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();
      ```

      Returns an `AsyncIterator` that iterates `eventName` events. It will throw
      if the `EventEmitter` emits `'error'`. It removes all listeners when
      exiting the loop. The `value` returned by each iteration is an array
      composed of the emitted event arguments.

      An `AbortSignal` can be used to cancel waiting on events:

      ```js
      const { on, EventEmitter } = require('events');
      const ac = new AbortController();

      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo', { signal: ac.signal })) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();

      process.nextTick(() => ac.abort());
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventEmitter, eventName: string, options?:
        StaticEventEmitterOptions): AsyncIterableIterator<any>
      parameters:
        - id: emitter
          type: EventEmitter
          description: ''
        - id: eventName
          type: string
          description: The name of the event being listened for
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: that iterates `eventName` events emitted by the `emitter`
        type: AsyncIterableIterator&lt;any&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.on'
    package: '@microsoft/live-share-media'
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.


      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(eventName: string | symbol, listener: (args: any[]) =>
        void): MediaPlayerSynchronizer
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.once'
    package: '@microsoft/live-share-media'
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.


      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function once(eventName: string | symbol, listener: (args: any[]) =>
        void): MediaPlayerSynchronizer
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: once(_DOMEventTarget, string, StaticEventEmitterOptions)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.once_1'
    package: '@microsoft/live-share-media'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: _DOMEventTarget, eventName: string,
        options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: _DOMEventTarget
          description: ''
        - id: eventName
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: once(_NodeEventTarget, string | symbol, StaticEventEmitterOptions)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.once'
    package: '@microsoft/live-share-media'
    summary: >-
      Creates a `Promise` that is fulfilled when the `EventEmitter` emits the
      given

      event or that is rejected if the `EventEmitter` emits `'error'` while
      waiting.

      The `Promise` will resolve with an array of all the arguments emitted to
      the

      given event.


      This method is intentionally generic and works with the web platform
      [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget)
      interface, which has no special`'error'` event

      semantics and does not listen to the `'error'` event.


      ```js

      const { once, EventEmitter } = require('events');


      async function run() {
        const ee = new EventEmitter();

        process.nextTick(() => {
          ee.emit('myevent', 42);
        });

        const [value] = await once(ee, 'myevent');
        console.log(value);

        const err = new Error('kaboom');
        process.nextTick(() => {
          ee.emit('error', err);
        });

        try {
          await once(ee, 'myevent');
        } catch (err) {
          console.log('error happened', err);
        }
      }


      run();

      ```


      The special handling of the `'error'` event is only used when
      `events.once()`is used to wait for another event. If `events.once()` is
      used to wait for the

      '`error'` event itself, then it is treated as any other kind of event
      without

      special handling:


      ```js

      const { EventEmitter, once } = require('events');


      const ee = new EventEmitter();


      once(ee, 'error')
        .then(([err]) => console.log('ok', err.message))
        .catch((err) => console.log('error', err.message));

      ee.emit('error', new Error('boom'));


      // Prints: ok boom

      ```


      An `AbortSignal` can be used to cancel waiting for the event:


      ```js

      const { EventEmitter, once } = require('events');


      const ee = new EventEmitter();

      const ac = new AbortController();


      async function foo(emitter, event, signal) {
        try {
          await once(emitter, event, { signal });
          console.log('event emitted!');
        } catch (error) {
          if (error.name === 'AbortError') {
            console.error('Waiting for the event was canceled!');
          } else {
            console.error('There was an error', error.message);
          }
        }
      }


      foo(ee, 'foo', ac.signal);

      ac.abort(); // Abort waiting for the event

      ee.emit('foo'); // Prints: Waiting for the event was canceled!

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: _NodeEventTarget, eventName: string |
        symbol, options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: _NodeEventTarget
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.prependListener'
    package: '@microsoft/live-share-media'
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.


      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(eventName: string | symbol, listener: (args:
        any[]) => void): MediaPlayerSynchronizer
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependListener
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.prependOnceListener'
    package: '@microsoft/live-share-media'
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.


      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(eventName: string | symbol, listener:
        (args: any[]) => void): MediaPlayerSynchronizer
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependOnceListener
  - name: rawListeners(string | symbol)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.rawListeners'
    package: '@microsoft/live-share-media'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).

      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.rawListeners
  - name: removeAllListeners(string | symbol)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.removeAllListeners'
    package: '@microsoft/live-share-media'
    summary: |-
      Removes all listeners, or those of the specified `eventName`.

      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeAllListeners(event?: string | symbol):
        MediaPlayerSynchronizer
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeAllListeners
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.removeListener'
    package: '@microsoft/live-share-media'
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.


      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(eventName: string | symbol, listener: (args:
        any[]) => void): MediaPlayerSynchronizer
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeListener
  - name: setMaxListeners(number)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.setMaxListeners'
    package: '@microsoft/live-share-media'
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): MediaPlayerSynchronizer'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
  - name: setMaxListeners(number, (_DOMEventTarget | EventEmitter)[])
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.setMaxListeners'
    package: '@microsoft/live-share-media'
    summary: |-
      ```js
      const {
        setMaxListeners,
        EventEmitter
      } = require('events');

      const target = new EventTarget();
      const emitter = new EventEmitter();

      setMaxListeners(5, target, emitter);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function setMaxListeners(n?: number, eventTargets:
        (_DOMEventTarget | EventEmitter)[])
      parameters:
        - id: 'n'
          type: number
          description: >-
            A non-negative number. The maximum number of listeners per
            `EventTarget` event.
        - id: eventTargets
          type: (_DOMEventTarget | EventEmitter)[]
          description: ''
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
methods:
  - name: >-
      addEventListener(MediaPlayerSynchronizerEvents, (evt:
      IMediaPlayerSynchronizerEvent) => void)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.addEventListener'
    package: '@microsoft/live-share-media'
    summary: Registers a new event listener.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addEventListener(event: MediaPlayerSynchronizerEvents,
        listener: (evt: IMediaPlayerSynchronizerEvent) => void):
        MediaPlayerSynchronizer
      parameters:
        - id: event
          type: >-
            <xref
            uid="@microsoft/live-share-media.MediaPlayerSynchronizerEvents" />
          description: Name of the event to add.
        - id: listener
          type: '(evt: IMediaPlayerSynchronizerEvent) =&gt; void'
          description: Function to call when the event is triggered.
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
  - name: beginSeek()
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.beginSeek'
    package: '@microsoft/live-share-media'
    summary: Begin a local seek operation.
    remarks: >-
      UI can call this when a user grabs a timeline scrubber and starts
      scrubbing the video to a

      new playback position. The synchronizer will being a new suspension which
      temporarily

      disconnects the client for the rest of the group for synchronization
      purposes. Calling

      `endSeek()` will end the suspension and seek the group to the users final
      seek position.
    isDeprecated: false
    syntax:
      content: function beginSeek()
  - name: end()
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.end'
    package: '@microsoft/live-share-media'
    summary: Ends synchronization of the current media player.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function end()
  - name: endSeek(number)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.endSeek'
    package: '@microsoft/live-share-media'
    summary: Ends a seek operation that was started by calling `beginSeek()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function endSeek(seekTo: number)'
      parameters:
        - id: seekTo
          type: number
          description: Playback position in seconds to seek the group to.
  - name: pause()
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.pause'
    package: '@microsoft/live-share-media'
    summary: Tells the group to pause the current video.
    remarks: >-
      For proper operation apps should avoid calling
      `mediaSession.coordinator.pause()` directly

      and instead use the synchronizers `pause()` method.
    isDeprecated: false
    syntax:
      content: function pause()
  - name: play()
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.play'
    package: '@microsoft/live-share-media'
    summary: Tells the group to begin playing the current video.
    remarks: >-
      For proper operation apps should avoid calling
      `mediaSession.coordinator.play()` directly

      and instead use the synchronizers `play()` method.
    isDeprecated: false
    syntax:
      content: function play()
  - name: >-
      removeEventListener(MediaPlayerSynchronizerEvents, (evt:
      IMediaPlayerSynchronizerEvent) => void)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.removeEventListener'
    package: '@microsoft/live-share-media'
    summary: Un-registers an existing event listener.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeEventListener(event: MediaPlayerSynchronizerEvents,
        listener: (evt: IMediaPlayerSynchronizerEvent) => void):
        MediaPlayerSynchronizer
      parameters:
        - id: event
          type: >-
            <xref
            uid="@microsoft/live-share-media.MediaPlayerSynchronizerEvents" />
          description: Name of the event to remove.
        - id: listener
          type: '(evt: IMediaPlayerSynchronizerEvent) =&gt; void'
          description: Function that was registered in call to `addEventListener()`.
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.MediaPlayerSynchronizer" />
  - name: seekTo(number)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.seekTo'
    package: '@microsoft/live-share-media'
    summary: Tells the group to seek the current video to a new playback position.
    remarks: >-
      For proper operation apps should avoid calling
      `mediaSession.coordinator.seekTo()` directly

      and instead use the synchronizers `seekTo()` method.
    isDeprecated: false
    syntax:
      content: 'function seekTo(time: number)'
      parameters:
        - id: time
          type: number
          description: ''
  - name: setTrack(ExtendedMediaMetadata, CoordinationWaitPoint[])
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.setTrack'
    package: '@microsoft/live-share-media'
    summary: Tells the group to change to a new track.
    remarks: >-
      For proper operation apps should avoid calling
      `mediaSession.coordinator.setTrack()` directly

      and instead use the synchronizers `setTrack()` method.
    isDeprecated: false
    syntax:
      content: >-
        function setTrack(track: ExtendedMediaMetadata, waitPoints?:
        CoordinationWaitPoint[])
      parameters:
        - id: track
          type: <xref uid="@microsoft/live-share-media.ExtendedMediaMetadata" />
          description: ''
        - id: waitPoints
          type: <xref uid="@microsoft/live-share-media.CoordinationWaitPoint" />[]
          description: ''
  - name: setTrackData(null | object)
    uid: '@microsoft/live-share-media.MediaPlayerSynchronizer.setTrackData'
    package: '@microsoft/live-share-media'
    summary: Updates the current tracks data object.
    remarks: >-
      For proper operation apps should avoid calling
      `mediaSession.coordinator.setTrackData()` directly

      and instead use the synchronizers `setTrackData()` method.
    isDeprecated: false
    syntax:
      content: 'function setTrackData(data: null | object)'
      parameters:
        - id: data
          type: null | object
          description: ''
extends: EventEmitter
