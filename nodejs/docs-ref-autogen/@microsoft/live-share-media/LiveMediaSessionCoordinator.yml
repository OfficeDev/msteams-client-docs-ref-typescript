### YamlMime:TSType
name: LiveMediaSessionCoordinator
uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator'
package: '@microsoft/live-share-media'
summary: >-
  The `LiveMediaSessionCoordinator` tracks the playback & position state of all
  other

  clients being synchronized with. It is responsible for keeping the local media
  player

  in sync with the group.
fullName: LiveMediaSessionCoordinator
remarks: ''
isDeprecated: false
type: class
properties:
  - name: canPlayPause
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.canPlayPause'
    package: '@microsoft/live-share-media'
    summary: >-
      Controls whether or not the local client is allowed to instruct the group
      to play or pause.
    fullName: canPlayPause
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to play/pause media, you should use "role based verification" to enforce
      those policies.
    isDeprecated: false
    syntax:
      content: 'canPlayPause: boolean'
      return:
        description: ''
        type: boolean
  - name: canSeek
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.canSeek'
    package: '@microsoft/live-share-media'
    summary: >-
      Controls whether or not the local client is allowed to seek the group to a
      new playback

      position.
    fullName: canSeek
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to change the playback position, you should use "role based verification"
      to enforce those policies.
    isDeprecated: false
    syntax:
      content: 'canSeek: boolean'
      return:
        description: ''
        type: boolean
  - name: canSendPositionUpdates
    uid: >-
      @microsoft/live-share-media.LiveMediaSessionCoordinator.canSendPositionUpdates
    package: '@microsoft/live-share-media'
    summary: >-
      Controls whether or not the local client is allowed to send position
      updates to the group.
    fullName: canSendPositionUpdates
    remarks: >-
      This flag largely meant to limit the number of signals sent to the group
      for performance reasons.

      It does not provide any security in itself.
    isDeprecated: false
    syntax:
      content: 'canSendPositionUpdates: boolean'
      return:
        description: ''
        type: boolean
  - name: canSetPlaybackRate
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.canSetPlaybackRate'
    package: '@microsoft/live-share-media'
    summary: >-
      Controls whether or not the local client is allowed to change the playback
      rate.
    fullName: canSetPlaybackRate
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to change the tracks data object, you should use "role based verification"
      to enforce those

      policies.
    isDeprecated: false
    syntax:
      content: 'canSetPlaybackRate: boolean'
      return:
        description: ''
        type: boolean
  - name: canSetTrack
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.canSetTrack'
    package: '@microsoft/live-share-media'
    summary: Controls whether or not the local client is allowed to change tracks.
    fullName: canSetTrack
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to change tracks, you should use "role based verification" to enforce
      those policies.
    isDeprecated: false
    syntax:
      content: 'canSetTrack: boolean'
      return:
        description: ''
        type: boolean
  - name: canSetTrackData
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.canSetTrackData'
    package: '@microsoft/live-share-media'
    summary: >-
      Controls whether or not the local client is allowed to change the tracks
      custom data object.
    fullName: canSetTrackData
    remarks: >-
      This flag largely meant to influence decisions made by the coordinator and
      can be used by

      the UI to determine what controls should be shown to the user. It does not
      provide any

      security in itself.


      If your app is running in a semi-trusted environment where only some
      clients are allowed

      to change the tracks data object, you should use "role based verification"
      to enforce those

      policies.
    isDeprecated: false
    syntax:
      content: 'canSetTrackData: boolean'
      return:
        description: ''
        type: boolean
  - name: isSuspended
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.isSuspended'
    package: '@microsoft/live-share-media'
    summary: Returns true if the local client is in a suspended state.
    fullName: isSuspended
    remarks: ''
    isDeprecated: false
    syntax:
      content: boolean isSuspended
      return:
        description: ''
        type: boolean
  - name: maxPlaybackDrift
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.maxPlaybackDrift'
    package: '@microsoft/live-share-media'
    summary: Max amount of playback drift allowed in seconds.
    fullName: maxPlaybackDrift
    remarks: ''
    isDeprecated: false
    syntax:
      content: number maxPlaybackDrift
      return:
        description: ''
        type: number
  - name: positionUpdateInterval
    uid: >-
      @microsoft/live-share-media.LiveMediaSessionCoordinator.positionUpdateInterval
    package: '@microsoft/live-share-media'
    summary: >-
      Frequency with which position updates are broadcast to the rest of the
      group in

      seconds.
    fullName: positionUpdateInterval
    remarks: ''
    isDeprecated: false
    syntax:
      content: number positionUpdateInterval
      return:
        description: ''
        type: number
inheritedProperties:
  - name: captureRejections
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.captureRejections'
    package: '@microsoft/live-share-media'
    summary: >-
      Value:
      [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)


      Change the default `captureRejections` option on all new `EventEmitter`
      objects.
    fullName: captureRejections
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejections: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.captureRejections
  - name: captureRejectionSymbol
    uid: >-
      @microsoft/live-share-media.LiveMediaSessionCoordinator.captureRejectionSymbol
    package: '@microsoft/live-share-media'
    summary: |-
      Value: `Symbol.for('nodejs.rejection')`

      See how to write a custom `rejection handler`.
    fullName: captureRejectionSymbol
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejectionSymbol: typeof captureRejectionSymbol'
      return:
        description: ''
        type: typeof captureRejectionSymbol
    inheritanceDescription: <b>Inherited From</b> EventEmitter.captureRejectionSymbol
  - name: defaultMaxListeners
    uid: >-
      @microsoft/live-share-media.LiveMediaSessionCoordinator.defaultMaxListeners
    package: '@microsoft/live-share-media'
    summary: >-
      By default, a maximum of `10` listeners can be registered for any single

      event. This limit can be changed for individual `EventEmitter` instances

      using the `emitter.setMaxListeners(n)` method. To change the default

      for _all_`EventEmitter` instances, the `events.defaultMaxListeners`
      property

      can be used. If this value is not a positive number, a `RangeError` is
      thrown.


      Take caution when setting the `events.defaultMaxListeners` because the

      change affects _all_ `EventEmitter` instances, including those created
      before

      the change is made. However, calling `emitter.setMaxListeners(n)` still
      has

      precedence over `events.defaultMaxListeners`.


      This is not a hard limit. The `EventEmitter` instance will allow

      more listeners to be added but will output a trace warning to stderr
      indicating

      that a "possible EventEmitter memory leak" has been detected. For any
      single

      `EventEmitter`, the `emitter.getMaxListeners()` and
      `emitter.setMaxListeners()` methods can be used to

      temporarily avoid this warning:


      ```js

      import { EventEmitter } from 'node:events';

      const emitter = new EventEmitter();

      emitter.setMaxListeners(emitter.getMaxListeners() + 1);

      emitter.once('event', () => {
        // do stuff
        emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));
      });

      ```


      The `--trace-warnings` command-line flag can be used to display the

      stack trace for such warnings.


      The emitted warning can be inspected with `process.on('warning')` and will

      have the additional `emitter`, `type`, and `count` properties, referring
      to

      the event emitter instance, the event's name and the number of attached

      listeners, respectively.

      Its `name` property is set to `'MaxListenersExceededWarning'`.
    fullName: defaultMaxListeners
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.defaultMaxListeners
  - name: errorMonitor
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.errorMonitor'
    package: '@microsoft/live-share-media'
    summary: >-
      This symbol shall be used to install a listener for only monitoring
      `'error'` events. Listeners installed using this symbol are called before
      the regular `'error'` listeners are called.


      Installing a listener using this symbol does not change the behavior once
      an `'error'` event is emitted. Therefore, the process will still crash if
      no

      regular `'error'` listener is installed.
    fullName: errorMonitor
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static errorMonitor: typeof errorMonitor'
      return:
        description: ''
        type: typeof errorMonitor
    inheritanceDescription: <b>Inherited From</b> EventEmitter.errorMonitor
inheritedMethods:
  - name: 'addAbortListener(AbortSignal, (event: Event) => void)'
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.addAbortListener'
    package: '@microsoft/live-share-media'
    summary: >-
      Listens once to the `abort` event on the provided `signal`.


      Listening to the `abort` event on abort signals is unsafe and may

      lead to resource leaks since another third party with the signal can

      call `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change

      this since it would violate the web standard. Additionally, the original

      API makes it easy to forget to remove listeners.


      This API allows safely using `AbortSignal`s in Node.js APIs by solving
      these

      two issues by listening to the event such that `stopImmediatePropagation`
      does

      not prevent the listener from running.


      Returns a disposable so that it may be unsubscribed from more easily.


      ```js

      import { addAbortListener } from 'node:events';


      function example(signal) {
        let disposable;
        try {
          signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
          disposable = addAbortListener(signal, (e) => {
            // Do something when signal is aborted.
          });
        } finally {
          disposable?.[Symbol.dispose]();
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function addAbortListener(signal: AbortSignal, resource: (event:
        Event) => void): Disposable
      parameters:
        - id: signal
          type: AbortSignal
          description: ''
        - id: resource
          type: '(event: Event) =&gt; void'
          description: ''
      return:
        description: Disposable that removes the `abort` listener.
        type: Disposable
    inheritanceDescription: <b>Inherited From</b> EventEmitter.addAbortListener
  - name: 'addListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.addListener'
    package: '@microsoft/live-share-media'
    summary: Alias for `emitter.on(eventName, listener)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): LiveMediaSessionCoordinator
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.addListener
  - name: emit<K>(string | symbol, AnyRest)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.emit'
    package: '@microsoft/live-share-media'
    summary: >-
      Synchronously calls each of the listeners registered for the event named
      `eventName`, in the order they were registered, passing the supplied
      arguments

      to each.


      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      import { EventEmitter } from 'node:events';

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit<K>(eventName: string | symbol, args: AnyRest): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.emit
  - name: eventNames()
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.eventNames'
    package: '@microsoft/live-share-media'
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.

      ```js
      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventNames(): (string | symbol)[]'
      return:
        description: ''
        type: (string | symbol)[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.eventNames
  - name: >-
      getEventListeners(EventEmitter<DefaultEventMap> | EventTarget, string |
      symbol)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.getEventListeners'
    package: '@microsoft/live-share-media'
    summary: >-
      Returns a copy of the array of listeners for the event named `eventName`.


      For `EventEmitter`s this behaves exactly the same as calling `.listeners`
      on

      the emitter.


      For `EventTarget`s this is the only way to get the event listeners for the

      event target. This is useful for debugging and diagnostic purposes.


      ```js

      import { getEventListeners, EventEmitter } from 'node:events';


      {
        const ee = new EventEmitter();
        const listener = () => console.log('Events are fun');
        ee.on('foo', listener);
        console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]
      }

      {
        const et = new EventTarget();
        const listener = () => console.log('Events are fun');
        et.addEventListener('foo', listener);
        console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getEventListeners(emitter: EventEmitter<DefaultEventMap>
        | EventTarget, name: string | symbol): Function[]
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt; | EventTarget
          description: ''
        - id: name
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getEventListeners
  - name: getMaxListeners()
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.getMaxListeners'
    package: '@microsoft/live-share-media'
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      [defaultMaxListeners](xref:@microsoft/live-share-media.LiveMediaSessionCoordinator.defaultMaxListeners).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: getMaxListeners(EventEmitter<DefaultEventMap> | EventTarget)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.getMaxListeners'
    package: '@microsoft/live-share-media'
    summary: >-
      Returns the currently set max amount of listeners.


      For `EventEmitter`s this behaves exactly the same as calling
      `.getMaxListeners` on

      the emitter.


      For `EventTarget`s this is the only way to get the max event listeners for
      the

      event target. If the number of event handlers on a single EventTarget
      exceeds

      the max set, the EventTarget will print a warning.


      ```js

      import { getMaxListeners, setMaxListeners, EventEmitter } from
      'node:events';


      {
        const ee = new EventEmitter();
        console.log(getMaxListeners(ee)); // 10
        setMaxListeners(11, ee);
        console.log(getMaxListeners(ee)); // 11
      }

      {
        const et = new EventTarget();
        console.log(getMaxListeners(et)); // 10
        setMaxListeners(11, et);
        console.log(getMaxListeners(et)); // 11
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getMaxListeners(emitter: EventEmitter<DefaultEventMap> |
        EventTarget): number
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt; | EventTarget
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: listenerCount(EventEmitter<DefaultEventMap>, string | symbol)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.listenerCount'
    package: '@microsoft/live-share-media'
    summary: >-
      A class method that returns the number of listeners for the given
      `eventName` registered on the given `emitter`.


      ```js

      import { EventEmitter, listenerCount } from 'node:events';


      const myEmitter = new EventEmitter();

      myEmitter.on('event', () => {});

      myEmitter.on('event', () => {});

      console.log(listenerCount(myEmitter, 'event'));

      // Prints: 2

      ```
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Since v3.2.0 - Use `listenerCount` instead.
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter<DefaultEventMap>,
        eventName: string | symbol): number
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: The emitter to query
        - id: eventName
          type: string | symbol
          description: The event name
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listenerCount<K>(string | symbol, Function)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.listenerCount'
    package: '@microsoft/live-share-media'
    summary: >-
      Returns the number of listeners listening for the event named `eventName`.

      If `listener` is provided, it will return how many times the listener is
      found

      in the list of the listeners of the event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listenerCount<K>(eventName: string | symbol, listener?:
        Function): number
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event being listened for
        - id: listener
          type: Function
          description: The event handler function
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listeners<K>(string | symbol)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.listeners'
    package: '@microsoft/live-share-media'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.

      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listeners
  - name: 'off<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.off'
    package: '@microsoft/live-share-media'
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): LiveMediaSessionCoordinator
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.off
  - name: >-
      on(EventEmitter<DefaultEventMap>, string | symbol,
      StaticEventEmitterIteratorOptions)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.on'
    package: '@microsoft/live-share-media'
    summary: >-
      ```js

      import { on, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ee = new EventEmitter();


      // Emit later on

      process.nextTick(() => {
        ee.emit('foo', 'bar');
        ee.emit('foo', 42);
      });


      for await (const event of on(ee, 'foo')) {
        // The execution of this inner block is synchronous and it
        // processes one event at a time (even with await). Do not use
        // if concurrent execution is required.
        console.log(event); // prints ['bar'] [42]
      }

      // Unreachable here

      ```


      Returns an `AsyncIterator` that iterates `eventName` events. It will throw

      if the `EventEmitter` emits `'error'`. It removes all listeners when

      exiting the loop. The `value` returned by each iteration is an array

      composed of the emitted event arguments.


      An `AbortSignal` can be used to cancel waiting on events:


      ```js

      import { on, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ac = new AbortController();


      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo', { signal: ac.signal })) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();


      process.nextTick(() => ac.abort());

      ```


      Use the `close` option to specify an array of event names that will end
      the iteration:


      ```js

      import { on, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ee = new EventEmitter();


      // Emit later on

      process.nextTick(() => {
        ee.emit('foo', 'bar');
        ee.emit('foo', 42);
        ee.emit('close');
      });


      for await (const event of on(ee, 'foo', { close: ['close'] })) {
        console.log(event); // prints ['bar'] [42]
      }

      // the loop will exit after 'close' is emitted

      console.log('done'); // prints 'done'

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventEmitter<DefaultEventMap>, eventName:
        string | symbol, options?: StaticEventEmitterIteratorOptions):
        AsyncIterableIterator<any[]>
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterIteratorOptions
          description: ''
      return:
        description: >-
          An `AsyncIterator` that iterates `eventName` events emitted by the
          `emitter`
        type: AsyncIterableIterator&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: on(EventTarget, string, StaticEventEmitterIteratorOptions)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.on_1'
    package: '@microsoft/live-share-media'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventTarget, eventName: string, options?:
        StaticEventEmitterIteratorOptions): AsyncIterableIterator<any[]>
      parameters:
        - id: emitter
          type: EventTarget
          description: ''
        - id: eventName
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterIteratorOptions
          description: ''
      return:
        description: ''
        type: AsyncIterableIterator&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: 'on<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.on'
    package: '@microsoft/live-share-media'
    summary: >-
      Adds the `listener` function to the end of the listeners array for the
      event

      named `eventName`. No checks are made to see if the `listener` has already

      been added. Multiple calls passing the same combination of `eventName` and

      `listener` will result in the `listener` being added, and called, multiple
      times.


      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added. The
      `emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): LiveMediaSessionCoordinator
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: >-
      once(EventEmitter<DefaultEventMap>, string | symbol,
      StaticEventEmitterOptions)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.once'
    package: '@microsoft/live-share-media'
    summary: >-
      Creates a `Promise` that is fulfilled when the `EventEmitter` emits the
      given

      event or that is rejected if the `EventEmitter` emits `'error'` while
      waiting.

      The `Promise` will resolve with an array of all the arguments emitted to
      the

      given event.


      This method is intentionally generic and works with the web platform
      [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget)
      interface, which has no special`'error'` event

      semantics and does not listen to the `'error'` event.


      ```js

      import { once, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ee = new EventEmitter();


      process.nextTick(() => {
        ee.emit('myevent', 42);
      });


      const [value] = await once(ee, 'myevent');

      console.log(value);


      const err = new Error('kaboom');

      process.nextTick(() => {
        ee.emit('error', err);
      });


      try {
        await once(ee, 'myevent');
      } catch (err) {
        console.error('error happened', err);
      }

      ```


      The special handling of the `'error'` event is only used when
      `events.once()` is used to wait for another event. If `events.once()` is
      used to wait for the

      '`error'` event itself, then it is treated as any other kind of event
      without

      special handling:


      ```js

      import { EventEmitter, once } from 'node:events';


      const ee = new EventEmitter();


      once(ee, 'error')
        .then(([err]) => console.log('ok', err.message))
        .catch((err) => console.error('error', err.message));

      ee.emit('error', new Error('boom'));


      // Prints: ok boom

      ```


      An `AbortSignal` can be used to cancel waiting for the event:


      ```js

      import { EventEmitter, once } from 'node:events';


      const ee = new EventEmitter();

      const ac = new AbortController();


      async function foo(emitter, event, signal) {
        try {
          await once(emitter, event, { signal });
          console.log('event emitted!');
        } catch (error) {
          if (error.name === 'AbortError') {
            console.error('Waiting for the event was canceled!');
          } else {
            console.error('There was an error', error.message);
          }
        }
      }


      foo(ee, 'foo', ac.signal);

      ac.abort(); // Abort waiting for the event

      ee.emit('foo'); // Prints: Waiting for the event was canceled!

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: EventEmitter<DefaultEventMap>, eventName:
        string | symbol, options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: once(EventTarget, string, StaticEventEmitterOptions)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.once_1'
    package: '@microsoft/live-share-media'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: EventTarget, eventName: string, options?:
        StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: EventTarget
          description: ''
        - id: eventName
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: 'once<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.once'
    package: '@microsoft/live-share-media'
    summary: >-
      Adds a **one-time** `listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.


      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added. The
      `emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function once<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): LiveMediaSessionCoordinator
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: 'prependListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.prependListener'
    package: '@microsoft/live-share-media'
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`

      and `listener` will result in the `listener` being added, and called,
      multiple times.


      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): LiveMediaSessionCoordinator
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependListener
  - name: 'prependOnceListener<K>(string | symbol, (args: any[]) => void)'
    uid: >-
      @microsoft/live-share-media.LiveMediaSessionCoordinator.prependOnceListener
    package: '@microsoft/live-share-media'
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.


      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener<K>(eventName: string | symbol, listener:
        (args: any[]) => void): LiveMediaSessionCoordinator
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependOnceListener
  - name: rawListeners<K>(string | symbol)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.rawListeners'
    package: '@microsoft/live-share-media'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).

      ```js
      import { EventEmitter } from 'node:events';
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rawListeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.rawListeners
  - name: removeAllListeners(string | symbol)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.removeAllListeners'
    package: '@microsoft/live-share-media'
    summary: |-
      Removes all listeners, or those of the specified `eventName`.

      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeAllListeners(eventName?: string | symbol):
        LiveMediaSessionCoordinator
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeAllListeners
  - name: 'removeListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.removeListener'
    package: '@microsoft/live-share-media'
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named `eventName`.


      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that any
      `removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      import { EventEmitter } from 'node:events';

      class MyEmitter extends EventEmitter {}

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')` listener is
      removed:


      ```js

      import { EventEmitter } from 'node:events';

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): LiveMediaSessionCoordinator
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeListener
  - name: setMaxListeners(number)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.setMaxListeners'
    package: '@microsoft/live-share-media'
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to `Infinity` (or `0`) to indicate an unlimited number of listeners.


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): LiveMediaSessionCoordinator'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-media.LiveMediaSessionCoordinator" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
  - name: setMaxListeners(number, (EventEmitter<DefaultEventMap> | EventTarget)[])
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.setMaxListeners'
    package: '@microsoft/live-share-media'
    summary: |-
      ```js
      import { setMaxListeners, EventEmitter } from 'node:events';

      const target = new EventTarget();
      const emitter = new EventEmitter();

      setMaxListeners(5, target, emitter);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function setMaxListeners(n?: number, eventTargets:
        (EventEmitter<DefaultEventMap> | EventTarget)[])
      parameters:
        - id: 'n'
          type: number
          description: >-
            A non-negative number. The maximum number of listeners per
            `EventTarget` event.
        - id: eventTargets
          type: (EventEmitter&lt;DefaultEventMap&gt; | EventTarget)[]
          description: ''
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
  - name: '[captureRejectionSymbol]<K>(Error, string | symbol, AnyRest)'
    uid: >-
      @microsoft/live-share-media.LiveMediaSessionCoordinator.[captureRejectionSymbol]
    package: '@microsoft/live-share-media'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function [captureRejectionSymbol]<K>(error: Error, event: string |
        symbol, args: AnyRest)
      parameters:
        - id: error
          type: Error
          description: ''
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
    inheritanceDescription: <b>Inherited From</b> EventEmitter.__@captureRejectionSymbol@123
methods:
  - name: beginSuspension(CoordinationWaitPoint)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.beginSuspension'
    package: '@microsoft/live-share-media'
    summary: Begins a new local suspension.
    remarks: >-
      Suspension temporarily suspend the clients local synchronization with the
      group. This can

      be useful for displaying ads to users or temporarily disconnecting from
      the session while

      the user seeks the video using a timeline scrubber.


      Multiple simultaneous suspensions are allowed and when the last suspension
      ends the local

      client will be immediately re-synchronized with the group.


      A "Dynamic Wait Point" can be specified when `beginSuspension()` is called
      and the wait

      point will be broadcast to all other clients in the group.  Those clients
      will then

      automatically enter a suspension state once they reach the positions
      specified by the

      wait point. Clients that are passed the wait point will immediately
      suspend.


      Any wait point based suspension (dynamic or static) will result in all
      clients remaining

      in a suspension state until the list client ends their suspension. This
      behavior can be

      conditionally bypassed by settings the wait points `maxClients` value.


      Throws an exception if the session/coordinator hasn't been initialized.
    isDeprecated: false
    syntax:
      content: >-
        function beginSuspension(waitPoint?: CoordinationWaitPoint):
        MediaSessionCoordinatorSuspension
      parameters:
        - id: waitPoint
          type: <xref uid="@microsoft/live-share-media.CoordinationWaitPoint" />
          description: Optional. Dynamic wait point to broadcast to all of the clients.
      return:
        description: >-
          The suspension object. Call `end()` on the returned suspension to end
          the suspension.
        type: >-
          <xref
          uid="@microsoft/live-share-media.MediaSessionCoordinatorSuspension" />
  - name: pause()
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.pause'
    package: '@microsoft/live-share-media'
    summary: Instructs the group to pause the current track.
    remarks: >-
      Throws an exception if the session/coordinator hasn't been initialized, no
      track has been

      loaded, or `canPlayPause` is false.
    isDeprecated: false
    syntax:
      content: 'function pause(): Promise<void>'
      return:
        description: >-
          a void promise that resolves once complete, throws if user does not
          have proper roles
        type: Promise&lt;void&gt;
  - name: play()
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.play'
    package: '@microsoft/live-share-media'
    summary: Instructs the group to play the current track.
    remarks: >-
      Throws an exception if the session/coordinator hasn't been initialized, no
      track has been

      loaded, or `canPlayPause` is false.
    isDeprecated: false
    syntax:
      content: 'function play(): Promise<void>'
      return:
        description: >-
          a void promise that resolves once complete, throws if user does not
          have proper roles
        type: Promise&lt;void&gt;
  - name: seekTo(number)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.seekTo'
    package: '@microsoft/live-share-media'
    summary: Instructs the group to seek to a new position within the current track.
    remarks: >-
      Throws an exception if the session/coordinator hasn't been initialized, no
      track has been

      loaded, or `canSeek` is false.
    isDeprecated: false
    syntax:
      content: 'function seekTo(time: number): Promise<void>'
      parameters:
        - id: time
          type: number
          description: Playback position in seconds to seek to.
      return:
        description: >-
          a void promise that resolves once complete, throws if user does not
          have proper roles
        type: Promise&lt;void&gt;
  - name: setPlaybackRate(number)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.setPlaybackRate'
    package: '@microsoft/live-share-media'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setPlaybackRate(playbackRate: number): Promise<void>'
      parameters:
        - id: playbackRate
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setTrack(null | ExtendedMediaMetadata, CoordinationWaitPoint[])
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.setTrack'
    package: '@microsoft/live-share-media'
    summary: Instructs the group to load a new track.
    remarks: >-
      Throws an exception if the session/coordinator hasn't been initialized or
      `canSetTrack` is

      false.
    isDeprecated: false
    syntax:
      content: >-
        function setTrack(metadata: null | ExtendedMediaMetadata, waitPoints?:
        CoordinationWaitPoint[]): Promise<void>
      parameters:
        - id: metadata
          type: >-
            null | <xref uid="@microsoft/live-share-media.ExtendedMediaMetadata"
            />
          description: >-
            The track to load or `null` to indicate that the end of the track is
            reached.
        - id: waitPoints
          type: <xref uid="@microsoft/live-share-media.CoordinationWaitPoint" />[]
          description: >-
            Optional. List of static wait points to configure for the track. 
            Dynamic wait points can be added via the `beginSuspension()` call.
      return:
        description: >-
          a void promise that resolves once complete, throws if user does not
          have proper roles
        type: Promise&lt;void&gt;
  - name: setTrackData(null | object)
    uid: '@microsoft/live-share-media.LiveMediaSessionCoordinator.setTrackData'
    package: '@microsoft/live-share-media'
    summary: Updates the track data object for the current track.
    remarks: >-
      The track data object can be used by applications to synchronize things
      like pitch, roll,

      and yaw of a 360 video. This data object will be reset to null anytime the
      track changes.


      Throws an exception if the session/coordinator hasn't been initialized or
      `canSetTrackData` is

      false.
    isDeprecated: false
    syntax:
      content: 'function setTrackData(data: null | object): Promise<void>'
      parameters:
        - id: data
          type: null | object
          description: >-
            New data object to sync with the group. This value will be
            synchronized using a last writer wins strategy.
      return:
        description: >-
          a void promise that resolves once complete, throws if user does not
          have proper roles
        type: Promise&lt;void&gt;
extends: EventEmitter
