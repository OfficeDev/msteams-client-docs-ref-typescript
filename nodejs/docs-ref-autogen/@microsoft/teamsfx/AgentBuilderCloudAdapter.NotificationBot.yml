### YamlMime:TSType
name: NotificationBot
uid: '@microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot'
package: '@microsoft/teamsfx'
summary: >-
  Provide utilities to send notification to varies targets (e.g., member, group,
  channel).
fullName: NotificationBot
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: NotificationBot(CloudAdapter, NotificationOptions_2)
    uid: '@microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot.constructor'
    package: '@microsoft/teamsfx'
    summary: Constructor of the notification bot.
    remarks: >-
      To ensure accuracy, it's recommended to initialize before handling any
      message.
    isDeprecated: false
    syntax:
      content: >-
        new NotificationBot(adapter: CloudAdapter, options?:
        NotificationOptions_2)
      parameters:
        - id: adapter
          type: <xref uid="@microsoft/agents-hosting.CloudAdapter" />
          description: The bound `CloudAdapter`
        - id: options
          type: >-
            <xref
            uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationOptions"
            />
          description: The initialize options
methods:
  - name: buildTeamsBotInstallation(Partial<ConversationReference>)
    uid: >-
      @microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot.buildTeamsBotInstallation
    package: '@microsoft/teamsfx'
    summary: >-
      Create a
      [TeamsBotInstallation](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.TeamsBotInstallation)
      instance with conversation reference.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function buildTeamsBotInstallation(conversationReference:
        Partial<ConversationReference>): null | TeamsBotInstallation
      parameters:
        - id: conversationReference
          type: >-
            Partial&lt;<xref
            uid="@microsoft/agents-activity.ConversationReference" />&gt;
          description: The bound `ConversationReference`.
      return:
        description: >-
          - The
          [TeamsBotInstallation](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.TeamsBotInstallation)
          instance or null.
        type: >-
          null | <xref
          uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.TeamsBotInstallation"
          />
  - name: >-
      findAllChannels((channel: Channel, teamDetails: undefined | TeamDetails)
      => Promise<boolean>)
    uid: >-
      @microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot.findAllChannels
    package: '@microsoft/teamsfx'
    summary: >-
      Return all
      [Channel](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.Channel) where
      predicate is true, and empty array otherwise.

      (Ensure the bot app is installed into the `General` channel, otherwise
      empty array will be returned.)
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findAllChannels(predicate: (channel: Channel, teamDetails:
        undefined | TeamDetails) => Promise<boolean>): Promise<Channel[]>
      parameters:
        - id: predicate
          type: >-
            (channel: Channel, teamDetails: undefined | TeamDetails) =&gt;
            Promise&lt;boolean&gt;
          description: Find calls predicate for each channel of the installation.
      return:
        description: >-
          An array of
          [Channel](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.Channel)
          where predicate is true, and empty array otherwise.
        type: >-
          Promise&lt;<xref
          uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.Channel" />[]&gt;
  - name: 'findAllMembers((member: Member) => Promise<boolean>, SearchScope)'
    uid: '@microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot.findAllMembers'
    package: '@microsoft/teamsfx'
    summary: >-
      Return all
      [Member](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.Member) where
      predicate is true, and empty array otherwise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findAllMembers(predicate: (member: Member) => Promise<boolean>,
        scope?: SearchScope): Promise<Member[]>
      parameters:
        - id: predicate
          type: '(member: Member) =&gt; Promise&lt;boolean&gt;'
          description: Find calls predicate for each member of the installation.
        - id: scope
          type: >-
            <xref uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.SearchScope"
            />
          description: |-
            The scope to find members from the installations
            (personal chat, group chat, Teams channel).
      return:
        description: >-
          An array of
          [Member](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.Member)
          where predicate is true, and empty array otherwise.
        type: >-
          Promise&lt;<xref
          uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.Member" />[]&gt;
  - name: >-
      findChannel((channel: Channel, teamDetails: undefined | TeamDetails) =>
      Promise<boolean>)
    uid: '@microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot.findChannel'
    package: '@microsoft/teamsfx'
    summary: >-
      Return the first
      [Channel](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.Channel) where
      predicate is true, and undefined otherwise.

      (Ensure the bot app is installed into the `General` channel, otherwise
      undefined will be returned.)
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findChannel(predicate: (channel: Channel, teamDetails:
        undefined | TeamDetails) => Promise<boolean>): Promise<undefined |
        Channel>
      parameters:
        - id: predicate
          type: >-
            (channel: Channel, teamDetails: undefined | TeamDetails) =&gt;
            Promise&lt;boolean&gt;
          description: >-
            Find calls predicate once for each channel of the installation,

            until it finds one where predicate returns true. If such a channel
            is found, find

            immediately returns that channel. Otherwise, find returns
            `undefined`.
      return:
        description: >-
          The first
          [Channel](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.Channel)
          where predicate is true, and `undefined` otherwise.
        type: >-
          Promise&lt;undefined | <xref
          uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.Channel" />&gt;
  - name: 'findMember((member: Member) => Promise<boolean>, SearchScope)'
    uid: '@microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot.findMember'
    package: '@microsoft/teamsfx'
    summary: >-
      Return the first
      [Member](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.Member) where
      predicate is true, and undefined otherwise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findMember(predicate: (member: Member) => Promise<boolean>,
        scope?: SearchScope): Promise<undefined | Member>
      parameters:
        - id: predicate
          type: '(member: Member) =&gt; Promise&lt;boolean&gt;'
          description: >-
            Find calls predicate once for each member of the installation,

            until it finds one where predicate returns true. If such a member is
            found, find

            immediately returns that member. Otherwise, find returns undefined.
        - id: scope
          type: >-
            <xref uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.SearchScope"
            />
          description: |-
            The scope to find members from the installations
            (personal chat, group chat, Teams channel).
      return:
        description: >-
          The first
          [Member](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.Member)
          where predicate is true, and `undefined` otherwise.
        type: >-
          Promise&lt;undefined | <xref
          uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.Member" />&gt;
  - name: getPagedInstallations(number, string, boolean)
    uid: >-
      @microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot.getPagedInstallations
    package: '@microsoft/teamsfx'
    summary: Gets a pagined list of targets where the bot is installed.
    remarks: The result is retrieving from the persisted storage.
    isDeprecated: false
    syntax:
      content: >-
        function getPagedInstallations(pageSize?: number, continuationToken?:
        string, validationEnabled?: boolean):
        Promise<PagedData<TeamsBotInstallation>>
      parameters:
        - id: pageSize
          type: number
          description: Suggested number of entries on a page.
        - id: continuationToken
          type: string
          description: A continuation token.
        - id: validationEnabled
          type: boolean
          description: ''
      return:
        description: >-
          An array of
          [TeamsBotInstallation](xref:@microsoft/teamsfx.AgentBuilderCloudAdapter.TeamsBotInstallation)
          with paged data and continuation token.
        type: >-
          Promise&lt;<xref uid="@microsoft/teamsfx.PagedData" />&lt;<xref
          uid="@microsoft/teamsfx.AgentBuilderCloudAdapter.TeamsBotInstallation"
          />&gt;&gt;
  - name: validateInstallation(Partial<ConversationReference>)
    uid: >-
      @microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot.validateInstallation
    package: '@microsoft/teamsfx'
    summary: Validate the installation by getting paged memebers.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function validateInstallation(conversationReference:
        Partial<ConversationReference>): Promise<boolean>
      parameters:
        - id: conversationReference
          type: >-
            Partial&lt;<xref
            uid="@microsoft/agents-activity.ConversationReference" />&gt;
          description: The bound `ConversationReference`.
      return:
        description: >-
          Returns false if recieves `BotNotInConversationRoster` error,
          otherwise returns true.
        type: Promise&lt;boolean&gt;
