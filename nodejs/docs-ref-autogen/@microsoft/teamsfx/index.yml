### YamlMime:TSPackage
uid: '@microsoft/teamsfx'
name: '@microsoft/teamsfx'
summary: ''
type: package
classes:
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.BotSsoExecutionDialog'
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.CardActionBot'
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.Channel'
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.CommandBot'
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.ConversationBot'
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.Member'
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationBot'
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.TeamsBotInstallation'
  - '@microsoft/teamsfx.ApiKeyProvider'
  - '@microsoft/teamsfx.AppCredential'
  - '@microsoft/teamsfx.BasicAuthProvider'
  - '@microsoft/teamsfx.BearerTokenAuthProvider'
  - '@microsoft/teamsfx.BotSsoExecutionDialog'
  - '@microsoft/teamsfx.CertificateAuthProvider'
  - '@microsoft/teamsfx.ErrorWithCode'
  - '@microsoft/teamsfx.InvokeResponseFactory'
  - '@microsoft/teamsfx.MessageBuilder'
  - '@microsoft/teamsfx.OnBehalfOfUserCredential'
  - '@microsoft/teamsfx.TeamsBotSsoPrompt'
  - '@microsoft/teamsfx.TeamsUserCredential'
interfaces:
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.ConversationOptions'
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.NotificationOptions'
  - '@microsoft/teamsfx.AuthProvider'
  - '@microsoft/teamsfx.AxiosInstance'
  - '@microsoft/teamsfx.BotSsoConfig'
  - '@microsoft/teamsfx.BotSsoExecutionActivityHandler'
  - '@microsoft/teamsfx.CardActionOptions'
  - '@microsoft/teamsfx.CommandMessage'
  - '@microsoft/teamsfx.CommandOptions'
  - '@microsoft/teamsfx.ConversationReferenceStore'
  - '@microsoft/teamsfx.ConversationReferenceStoreAddOptions'
  - '@microsoft/teamsfx.GetTeamsUserTokenOptions'
  - '@microsoft/teamsfx.Logger'
  - '@microsoft/teamsfx.MessageExtensionTokenResponse'
  - '@microsoft/teamsfx.NotificationTarget'
  - '@microsoft/teamsfx.PagedData'
  - '@microsoft/teamsfx.TeamsBotSsoPromptSettings'
  - '@microsoft/teamsfx.TeamsBotSsoPromptTokenResponse'
  - '@microsoft/teamsfx.TeamsFxAdaptiveCardActionHandler'
  - '@microsoft/teamsfx.TeamsFxBotCommandHandler'
  - '@microsoft/teamsfx.TeamsFxBotSsoCommandHandler'
  - '@microsoft/teamsfx.UserInfo'
enums:
  - '@microsoft/teamsfx.AgentBuilderCloudAdapter.SearchScope'
  - '@microsoft/teamsfx.AdaptiveCardResponse'
  - '@microsoft/teamsfx.ApiKeyLocation'
  - '@microsoft/teamsfx.ErrorCode'
  - '@microsoft/teamsfx.InvokeResponseErrorCode'
  - '@microsoft/teamsfx.LogLevel'
  - '@microsoft/teamsfx.NotificationTargetType'
typeAliases:
  - '@microsoft/teamsfx.AppCredentialAuthConfig'
  - '@microsoft/teamsfx.BotSsoExecutionDialogHandler'
  - '@microsoft/teamsfx.LogFunction'
  - '@microsoft/teamsfx.OnBehalfOfCredentialAuthConfig'
  - '@microsoft/teamsfx.TeamsUserCredentialAuthConfig'
  - '@microsoft/teamsfx.TriggerPatterns'
functions:
  - name: createApiClient(string, AuthProvider)
    uid: '@microsoft/teamsfx.createApiClient'
    package: '@microsoft/teamsfx'
    summary: >+
      Initializes new Axios instance with specific auth provider


      **Example**


      ```typescript

      const client = createApiClient("https://my-api-endpoint-base-url", new
      BasicAuthProvider("xxx","xxx"));

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createApiClient(apiEndpoint: string, authProvider:
        AuthProvider): AxiosInstance
      parameters:
        - id: apiEndpoint
          type: string
          description: Base url of the API
        - id: authProvider
          type: <xref uid="@microsoft/teamsfx.AuthProvider" />
          description: Auth provider that injects authentication info to each request
      return:
        description: axios instance configured with specfic auth provider
        type: <xref uid="@microsoft/teamsfx.AxiosInstance" />
  - name: >-
      createPemCertOption(string | Buffer, string | Buffer, { ca?: string |
      Buffer, passphrase?: string })
    uid: '@microsoft/teamsfx.createPemCertOption'
    package: '@microsoft/teamsfx'
    summary: Helper to create SecureContextOptions from PEM format cert
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createPemCertOption(cert: string | Buffer, key: string |
        Buffer, options?: { ca?: string | Buffer, passphrase?: string }):
        SecureContextOptions
      parameters:
        - id: cert
          type: string | Buffer
          description: The cert chain in PEM format
        - id: key
          type: string | Buffer
          description: The private key for the cert chain
        - id: options
          type: '{ ca?: string | Buffer, passphrase?: string }'
          description: Optional settings when create the cert options.
      return:
        description: Instance of SecureContextOptions
        type: SecureContextOptions
  - name: 'createPfxCertOption(string | Buffer, { passphrase?: string })'
    uid: '@microsoft/teamsfx.createPfxCertOption'
    package: '@microsoft/teamsfx'
    summary: Helper to create SecureContextOptions from PFX format cert
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createPfxCertOption(pfx: string | Buffer, options?: {
        passphrase?: string }): SecureContextOptions
      parameters:
        - id: pfx
          type: string | Buffer
          description: The content of .pfx file
        - id: options
          type: '{ passphrase?: string }'
          description: Optional settings when create the cert options.
      return:
        description: Instance of SecureContextOptions
        type: SecureContextOptions
  - name: getLogLevel()
    uid: '@microsoft/teamsfx.getLogLevel'
    package: '@microsoft/teamsfx'
    summary: Get log level.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getLogLevel(): LogLevel | undefined'
      return:
        description: Log level
        type: <xref uid="@microsoft/teamsfx.LogLevel" /> | undefined
  - name: >-
      handleMessageExtensionLinkQueryWithSSO(TurnContext,
      OnBehalfOfCredentialAuthConfig, string, string | string[], (token:
      MessageExtensionTokenResponse) => Promise<any>)
    uid: '@microsoft/teamsfx.handleMessageExtensionLinkQueryWithSSO'
    package: '@microsoft/teamsfx'
    summary: Users execute link query in message extension with SSO or access token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function handleMessageExtensionLinkQueryWithSSO(context: TurnContext,
        config: OnBehalfOfCredentialAuthConfig, initiateLoginEndpoint: string,
        scopes: string | string[], logic: (token: MessageExtensionTokenResponse)
        => Promise<any>): Promise<void | MessagingExtensionResponse>
      parameters:
        - id: context
          type: <xref uid="@microsoft/agents-hosting.TurnContext" />
          description: The context object for the current turn.
        - id: config
          type: <xref uid="@microsoft/teamsfx.OnBehalfOfCredentialAuthConfig" />
          description: User custom the message extension authentication configuration.
        - id: initiateLoginEndpoint
          type: string
          description: Login page for Teams to redirect to.
        - id: scopes
          type: string | string[]
          description: The list of scopes for which the token will have access.
        - id: logic
          type: '(token: MessageExtensionTokenResponse) =&gt; Promise&lt;any&gt;'
          description: >-
            Business logic when executing the link query in message extension
            with SSO or access token.
      return:
        description: >-
          A MessageExtension Response for the activity. If the logic not return
          any, return void instead.
        type: >-
          Promise&lt;void | <xref
          uid="@microsoft/agents-hosting-teams.MessagingExtensionResponse"
          />&gt;
  - name: >-
      handleMessageExtensionQueryWithSSO(TurnContext,
      OnBehalfOfCredentialAuthConfig, string, string | string[], (token:
      MessageExtensionTokenResponse) => Promise<any>)
    uid: '@microsoft/teamsfx.handleMessageExtensionQueryWithSSO'
    package: '@microsoft/teamsfx'
    summary: Users execute query in message extension with SSO or access token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function handleMessageExtensionQueryWithSSO(context: TurnContext,
        config: OnBehalfOfCredentialAuthConfig, initiateLoginEndpoint: string,
        scopes: string | string[], logic: (token: MessageExtensionTokenResponse)
        => Promise<any>): Promise<void | MessagingExtensionResponse>
      parameters:
        - id: context
          type: <xref uid="@microsoft/agents-hosting.TurnContext" />
          description: The context object for the current turn.
        - id: config
          type: <xref uid="@microsoft/teamsfx.OnBehalfOfCredentialAuthConfig" />
          description: User custom the message extension authentication configuration.
        - id: initiateLoginEndpoint
          type: string
          description: Login page for Teams to redirect to.
        - id: scopes
          type: string | string[]
          description: The list of scopes for which the token will have access.
        - id: logic
          type: '(token: MessageExtensionTokenResponse) =&gt; Promise&lt;any&gt;'
          description: >-
            Business logic when executing the query in message extension with
            SSO or access token.
      return:
        description: >-
          A MessageExtension Response for the activity. If the logic not return
          any, return void instead.
        type: >-
          Promise&lt;void | <xref
          uid="@microsoft/agents-hosting-teams.MessagingExtensionResponse"
          />&gt;
  - name: setLogFunction(LogFunction)
    uid: '@microsoft/teamsfx.setLogFunction'
    package: '@microsoft/teamsfx'
    summary: >+
      Set custom log function. Use the function if it's set. Priority is lower
      than setLogger.


      **Example**


      ```typescript

      setLogFunction((level: LogLevel, message: string) => {
        if (level === LogLevel.Error) {
          console.log(message);
        }
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogFunction(logFunction?: LogFunction)'
      parameters:
        - id: logFunction
          type: <xref uid="@microsoft/teamsfx.LogFunction" />
          description: >-
            custom log function. If it's undefined, custom log function will be
            cleared.
  - name: setLogLevel(LogLevel)
    uid: '@microsoft/teamsfx.setLogLevel'
    package: '@microsoft/teamsfx'
    summary: Update log level helper.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogLevel(level: LogLevel)'
      parameters:
        - id: level
          type: <xref uid="@microsoft/teamsfx.LogLevel" />
          description: log level in configuration
  - name: setLogger(Logger)
    uid: '@microsoft/teamsfx.setLogger'
    package: '@microsoft/teamsfx'
    summary: >+
      Set custom logger. Use the output functions if it's set. Priority is
      higher than setLogFunction.


      **Example**


      ```typescript

      setLogger({
        verbose: console.debug,
        info: console.info,
        warn: console.warn,
        error: console.error,
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogger(logger?: Logger)'
      parameters:
        - id: logger
          type: <xref uid="@microsoft/teamsfx.Logger" />
          description: custom logger. If it's undefined, custom logger will be cleared.
