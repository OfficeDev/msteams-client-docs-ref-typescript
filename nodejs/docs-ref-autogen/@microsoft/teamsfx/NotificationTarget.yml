### YamlMime:TSType
name: NotificationTarget
uid: '@microsoft/teamsfx.NotificationTarget'
package: '@microsoft/teamsfx'
summary: Represent a notification target.
fullName: NotificationTarget
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: type
    uid: '@microsoft/teamsfx.NotificationTarget.type'
    package: '@microsoft/teamsfx'
    summary: The type of target, could be "Channel" or "Group" or "Person".
    fullName: type
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'type?: NotificationTargetType'
      return:
        description: ''
        type: <xref uid="@microsoft/teamsfx.NotificationTargetType" />
methods:
  - name: >-
      sendAdaptiveCard(unknown, (context: TurnContext, error: Error) =>
      Promise<void>)
    uid: '@microsoft/teamsfx.NotificationTarget.sendAdaptiveCard'
    package: '@microsoft/teamsfx'
    summary: Send an adaptive card message.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendAdaptiveCard(card: unknown, onError?: (context:
        TurnContext, error: Error) => Promise<void>): Promise<MessageResponse>
      parameters:
        - id: card
          type: unknown
          description: the adaptive card raw JSON.
        - id: onError
          type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
          description: >-
            an optional error handler that can catch exceptions during adaptive
            card sending.

            If not defined, error will be handled by `BotAdapter.onTurnError`.
      return:
        description: the response of sending adaptive card message.
        type: Promise&lt;MessageResponse&gt;
  - name: 'sendMessage(string, (context: TurnContext, error: Error) => Promise<void>)'
    uid: '@microsoft/teamsfx.NotificationTarget.sendMessage'
    package: '@microsoft/teamsfx'
    summary: Send a plain text message.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendMessage(text: string, onError?: (context: TurnContext,
        error: Error) => Promise<void>): Promise<MessageResponse>
      parameters:
        - id: text
          type: string
          description: the plain text message.
        - id: onError
          type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
          description: >-
            an optional error handler that can catch exceptions during message
            sending.

            If not defined, error will be handled by `BotAdapter.onTurnError`.
      return:
        description: the response of sending message.
        type: Promise&lt;MessageResponse&gt;
