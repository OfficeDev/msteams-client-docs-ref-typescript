### YamlMime:TSType
name: ConversationBot
uid: '@microsoft/teamsfx.ConversationBot'
package: '@microsoft/teamsfx'
summary: ''
fullName: ConversationBot
remarks: ''
isDeprecated: true
customDeprecatedMessage: Use `BotBuilderCloudAdapter.ConversationBot` instead.
type: class
constructors:
  - name: ConversationBot(ConversationOptions)
    uid: '@microsoft/teamsfx.ConversationBot.constructor'
    package: '@microsoft/teamsfx'
    summary: Creates new instance of the `ConversationBot`.
    remarks: >-
      It's recommended to create your own adapter and storage for production
      environment instead of the default one.
    isDeprecated: false
    syntax:
      content: 'new ConversationBot(options: ConversationOptions)'
      parameters:
        - id: options
          type: <xref uid="@microsoft/teamsfx.ConversationOptions" />
          description: initialize options
properties:
  - name: adapter
    uid: '@microsoft/teamsfx.ConversationBot.adapter'
    package: '@microsoft/teamsfx'
    summary: The bot adapter.
    fullName: adapter
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'adapter: BotFrameworkAdapter'
      return:
        description: ''
        type: BotFrameworkAdapter
  - name: cardAction
    uid: '@microsoft/teamsfx.ConversationBot.cardAction'
    package: '@microsoft/teamsfx'
    summary: The action handler used for adaptive card universal actions.
    fullName: cardAction
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'cardAction?: CardActionBot'
      return:
        description: ''
        type: <xref uid="@microsoft/teamsfx.CardActionBot" />
  - name: command
    uid: '@microsoft/teamsfx.ConversationBot.command'
    package: '@microsoft/teamsfx'
    summary: The entrypoint of command and response.
    fullName: command
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'command?: CommandBot'
      return:
        description: ''
        type: <xref uid="@microsoft/teamsfx.CommandBot" />
  - name: notification
    uid: '@microsoft/teamsfx.ConversationBot.notification'
    package: '@microsoft/teamsfx'
    summary: The entrypoint of notification.
    fullName: notification
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'notification?: NotificationBot'
      return:
        description: ''
        type: <xref uid="@microsoft/teamsfx.NotificationBot" />
methods:
  - name: >-
      requestHandler(WebRequest, WebResponse, (context: TurnContext) =>
      Promise<any>)
    uid: '@microsoft/teamsfx.ConversationBot.requestHandler'
    package: '@microsoft/teamsfx'
    summary: |+
      The request handler to integrate with web request.

      **Example**

      For example, to use with Restify:
      ``` typescript
      // The default/empty behavior
      server.post("api/messages", conversationBot.requestHandler);

      // Or, add your own logic
      server.post("api/messages", async (req, res) => {
        await conversationBot.requestHandler(req, res, async (context) => {
          // your-own-context-logic
        });
      });
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function requestHandler(req: WebRequest, res: WebResponse, logic?:
        (context: TurnContext) => Promise<any>): Promise<void>
      parameters:
        - id: req
          type: WebRequest
          description: an Express or Restify style request object.
        - id: res
          type: WebResponse
          description: an Express or Restify style response object.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: the additional function to handle bot context.
      return:
        description: ''
        type: Promise&lt;void&gt;
