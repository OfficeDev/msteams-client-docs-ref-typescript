### YamlMime:TSType
name: NotificationBot
uid: '@microsoft/teamsfx.NotificationBot'
package: '@microsoft/teamsfx'
summary: ''
fullName: NotificationBot
remarks: ''
isDeprecated: true
customDeprecatedMessage: Use `BotBuilderCloudAdapter.NotificationBot` instead.
type: class
constructors:
  - name: NotificationBot(BotFrameworkAdapter, NotificationOptions_2)
    uid: '@microsoft/teamsfx.NotificationBot.constructor'
    package: '@microsoft/teamsfx'
    summary: constructor of the notification bot.
    remarks: >-
      To ensure accuracy, it's recommended to initialize before handling any
      message.
    isDeprecated: false
    syntax:
      content: >-
        new NotificationBot(adapter: BotFrameworkAdapter, options?:
        NotificationOptions_2)
      parameters:
        - id: adapter
          type: BotFrameworkAdapter
          description: the bound `BotFrameworkAdapter`
        - id: options
          type: <xref uid="@microsoft/teamsfx.NotificationOptions" />
          description: initialize options
methods:
  - name: >-
      findAllChannels((channel: Channel, teamDetails: undefined | TeamDetails)
      => Promise<boolean>)
    uid: '@microsoft/teamsfx.NotificationBot.findAllChannels'
    package: '@microsoft/teamsfx'
    summary: >-
      Returns all [Channel](xref:@microsoft/teamsfx.Channel) where predicate is
      true, and empty array otherwise.

      (Ensure the bot app is installed into the `General` channel, otherwise
      empty array will be returned.)
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findAllChannels(predicate: (channel: Channel, teamDetails:
        undefined | TeamDetails) => Promise<boolean>): Promise<Channel[]>
      parameters:
        - id: predicate
          type: >-
            (channel: Channel, teamDetails: undefined | TeamDetails) =&gt;
            Promise&lt;boolean&gt;
          description: find calls predicate for each channel of the installation.
      return:
        description: >-
          an array of [Channel](xref:@microsoft/teamsfx.Channel) where predicate
          is true, and empty array otherwise.
        type: Promise&lt;<xref uid="@microsoft/teamsfx.Channel" />[]&gt;
  - name: 'findAllMembers((member: Member) => Promise<boolean>, SearchScope)'
    uid: '@microsoft/teamsfx.NotificationBot.findAllMembers'
    package: '@microsoft/teamsfx'
    summary: >-
      Returns all [Member](xref:@microsoft/teamsfx.Member) where predicate is
      true, and empty array otherwise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findAllMembers(predicate: (member: Member) => Promise<boolean>,
        scope?: SearchScope): Promise<Member[]>
      parameters:
        - id: predicate
          type: '(member: Member) =&gt; Promise&lt;boolean&gt;'
          description: find calls predicate for each member of the installation.
        - id: scope
          type: <xref uid="@microsoft/teamsfx.SearchScope" />
          description: |-
            the scope to find members from the installations
            (personal chat, group chat, Teams channel).
      return:
        description: >-
          an array of [Member](xref:@microsoft/teamsfx.Member) where predicate
          is true, and empty array otherwise.
        type: Promise&lt;<xref uid="@microsoft/teamsfx.Member" />[]&gt;
  - name: >-
      findChannel((channel: Channel, teamDetails: undefined | TeamDetails) =>
      Promise<boolean>)
    uid: '@microsoft/teamsfx.NotificationBot.findChannel'
    package: '@microsoft/teamsfx'
    summary: >-
      Returns the first [Channel](xref:@microsoft/teamsfx.Channel) where
      predicate is true, and undefined otherwise.

      (Ensure the bot app is installed into the `General` channel, otherwise
      undefined will be returned.)
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findChannel(predicate: (channel: Channel, teamDetails:
        undefined | TeamDetails) => Promise<boolean>): Promise<undefined |
        Channel>
      parameters:
        - id: predicate
          type: >-
            (channel: Channel, teamDetails: undefined | TeamDetails) =&gt;
            Promise&lt;boolean&gt;
          description: >-
            find calls predicate once for each channel of the installation,

            until it finds one where predicate returns true. If such a channel
            is found, find

            immediately returns that channel. Otherwise, find returns undefined.
      return:
        description: >-
          the first [Channel](xref:@microsoft/teamsfx.Channel) where predicate
          is true, and undefined otherwise.
        type: Promise&lt;undefined | <xref uid="@microsoft/teamsfx.Channel" />&gt;
  - name: 'findMember((member: Member) => Promise<boolean>, SearchScope)'
    uid: '@microsoft/teamsfx.NotificationBot.findMember'
    package: '@microsoft/teamsfx'
    summary: >-
      Returns the first [Member](xref:@microsoft/teamsfx.Member) where predicate
      is true, and undefined otherwise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findMember(predicate: (member: Member) => Promise<boolean>,
        scope?: SearchScope): Promise<undefined | Member>
      parameters:
        - id: predicate
          type: '(member: Member) =&gt; Promise&lt;boolean&gt;'
          description: >-
            find calls predicate once for each member of the installation,

            until it finds one where predicate returns true. If such a member is
            found, find

            immediately returns that member. Otherwise, find returns undefined.
        - id: scope
          type: <xref uid="@microsoft/teamsfx.SearchScope" />
          description: |-
            the scope to find members from the installations
            (personal chat, group chat, Teams channel).
      return:
        description: >-
          the first [Member](xref:@microsoft/teamsfx.Member) where predicate is
          true, and undefined otherwise.
        type: Promise&lt;undefined | <xref uid="@microsoft/teamsfx.Member" />&gt;
  - name: installations()
    uid: '@microsoft/teamsfx.NotificationBot.installations'
    package: '@microsoft/teamsfx'
    summary: Get all targets where the bot is installed.
    remarks: The result is retrieving from the persisted storage.
    isDeprecated: false
    syntax:
      content: 'function installations(): Promise<TeamsBotInstallation[]>'
      return:
        description: >-
          - an array of
          [TeamsBotInstallation](xref:@microsoft/teamsfx.TeamsBotInstallation).
        type: >-
          Promise&lt;<xref uid="@microsoft/teamsfx.TeamsBotInstallation"
          />[]&gt;
