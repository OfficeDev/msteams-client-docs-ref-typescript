### YamlMime:TSPackage
uid: '@microsoft/teams-js.videoEffects'
name: videoEffects
summary: Module to support video extensibility of the SDK
type: module
enums:
  - '@microsoft/teams-js.videoEffects.EffectChangeType'
  - '@microsoft/teams-js.videoEffects.EffectFailureReason'
  - '@microsoft/teams-js.videoEffects.VideoFrameFormat'
typeAliases:
  - '@microsoft/teams-js.videoEffects.notifyErrorFunctionType'
  - '@microsoft/teams-js.videoEffects.notifyVideoFrameProcessedFunctionType'
  - '@microsoft/teams-js.videoEffects.RegisterForVideoFrameParameters'
  - '@microsoft/teams-js.videoEffects.VideoBufferHandler'
  - '@microsoft/teams-js.videoEffects.VideoEffectCallback'
  - '@microsoft/teams-js.videoEffects.VideoFrameData'
  - '@microsoft/teams-js.videoEffects.VideoFrameHandler'
interfaces:
  - '@microsoft/teams-js.videoEffects.VideoBufferData'
  - '@microsoft/teams-js.videoEffects.VideoFrame'
  - '@microsoft/teams-js.videoEffects.VideoFrameConfig'
package: '@microsoft/teams-js'
previewState: beta
functions:
  - name: isSupported()
    uid: '@microsoft/teams-js.videoEffects.isSupported'
    package: '@microsoft/teams-js'
    summary: Checks if video capability is supported by the host.
    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: 'function isSupported(): boolean'
      return:
        description: boolean to represent whether the video capability is supported
        type: boolean
  - name: notifySelectedVideoEffectChanged(EffectChangeType, undefined | string)
    uid: '@microsoft/teams-js.videoEffects.notifySelectedVideoEffectChanged'
    package: '@microsoft/teams-js'
    summary: >-
      Video extension should call this to notify host that the current selected
      effect parameter changed.

      If it's pre-meeting, host will call videoEffectCallback immediately then
      use the videoEffect.

      If it's the in-meeting scenario, we will call videoEffectCallback when
      apply button clicked.
    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: >-
        function notifySelectedVideoEffectChanged(effectChangeType:
        EffectChangeType, effectId: undefined | string)
      parameters:
        - id: effectChangeType
          type: <xref uid="@microsoft/teams-js.videoEffects.EffectChangeType" />
          description: the effect change type.
        - id: effectId
          type: undefined | string
          description: Newly selected effect id.
  - name: registerForVideoEffect(VideoEffectCallback)
    uid: '@microsoft/teams-js.videoEffects.registerForVideoEffect'
    package: '@microsoft/teams-js'
    summary: Register a callback to be notified when a new video effect is applied.
    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: 'function registerForVideoEffect(callback: VideoEffectCallback)'
      parameters:
        - id: callback
          type: <xref uid="@microsoft/teams-js.videoEffects.VideoEffectCallback" />
          description: Function to be called when new video effect is applied.
  - name: registerForVideoFrame(RegisterForVideoFrameParameters)
    uid: '@microsoft/teams-js.videoEffects.registerForVideoFrame'
    package: '@microsoft/teams-js'
    summary: |+
      Register callbacks to process the video frames if the host supports it.

      **Example**

      ```typescript
      videoEffects.registerForVideoFrame({
        videoFrameHandler: async (videoFrameData) => {
          const originalFrame = videoFrameData.videoFrame as VideoFrame;
          try {
            const processedFrame = await processFrame(originalFrame);
            return processedFrame;
          } catch (e) {
            throw e;
          }
        },
        videoBufferHandler: (
          bufferData: VideoBufferData,
          notifyVideoFrameProcessed: notifyVideoFrameProcessedFunctionType,
          notifyError: notifyErrorFunctionType
          ) => {
            try {
              processFrameInplace(bufferData);
              notifyVideoFrameProcessed();
            } catch (e) {
              notifyError(e);
            }
          },
        config: {
          format: videoEffects.VideoPixelFormat.NV12,
        }
      });
      ```

    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: >-
        function registerForVideoFrame(parameters:
        RegisterForVideoFrameParameters)
      parameters:
        - id: parameters
          type: >-
            <xref
            uid="@microsoft/teams-js.videoEffects.RegisterForVideoFrameParameters"
            />
          description: >-
            Callbacks and configuration to process the video frames. A host may
            support either
            [VideoFrameHandler](xref:@microsoft/teams-js.videoEffects.VideoFrameHandler)
            or
            [VideoBufferHandler](xref:@microsoft/teams-js.videoEffects.VideoBufferHandler),
            but not both.

            To ensure the video effect works on all supported hosts, the video
            app must provide both
            [VideoFrameHandler](xref:@microsoft/teams-js.videoEffects.VideoFrameHandler)
            and
            [VideoBufferHandler](xref:@microsoft/teams-js.videoEffects.VideoBufferHandler).

            The host will choose the appropriate callback based on the host's
            capability.
