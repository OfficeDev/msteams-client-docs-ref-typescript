### YamlMime:TSType
name: EphemeralEventScope
uid: '@microsoft/live-share.EphemeralEventScope'
package: '@microsoft/live-share'
summary: Object responsible for sending and receiving ephemeral events.
fullName: EphemeralEventScope
remarks: >-
  Ephemeral objects send and receive events using an event scope. Event scopes
  can be restricted

  to only receive events from clients with specific roles. Any events that are
  received from

  clients without an allowed role type will be ignored.


  Event scopes are isolated on a per Fluid object basis. That means that two
  different Fluid

  objects using the same event names don't have to worry about collisions.  Two
  event scopes

  within the same Fluid object, however, don't have any isolation. You can use
  multiple event

  scopes within the same FLuid object, you just need to be careful that they
  send different

  events.
isDeprecated: false
type: class
constructors:
  - name: EphemeralEventScope(IRuntimeSignaler, UserMeetingRole[])
    uid: '@microsoft/live-share.EphemeralEventScope.constructor'
    package: '@microsoft/live-share'
    summary: Creates a new `EphemeralEventScope` instance.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EphemeralEventScope(runtime: IRuntimeSignaler, allowedRoles?:
        UserMeetingRole[])
      parameters:
        - id: runtime
          type: <xref uid="@microsoft/live-share.IRuntimeSignaler" />
          description: A Fluid objects runtime instance, typically `this.runtime`.
        - id: allowedRoles
          type: <xref uid="@microsoft/live-share.UserMeetingRole" />[]
          description: |-
            Optional. List of roles allowed to send events using this scope.
            You should use a second scope if you need mixed permission support.
properties:
  - name: allowedRoles
    uid: '@microsoft/live-share.EphemeralEventScope.allowedRoles'
    package: '@microsoft/live-share'
    summary: List of roles allowed to send events through this scope.
    fullName: allowedRoles
    remarks: ''
    isDeprecated: false
    syntax:
      content: UserMeetingRole[] allowedRoles
      return:
        description: ''
        type: <xref uid="@microsoft/live-share.UserMeetingRole" />[]
  - name: clientId
    uid: '@microsoft/live-share.EphemeralEventScope.clientId'
    package: '@microsoft/live-share'
    summary: >-
      The runtimes current client ID. This will be `undefined` if the client is
      disconnected.
    fullName: clientId
    remarks: ''
    isDeprecated: false
    syntax:
      content: undefined | string clientId
      return:
        description: ''
        type: undefined | string
inheritedProperties:
  - name: addListener
    uid: '@microsoft/live-share.EphemeralEventScope.addListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: addListener
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'addListener: TypedEventTransform<EphemeralEventScope, IErrorEvent>'
      return:
        description: ''
        type: >-
          TypedEventTransform&lt;<xref
          uid="@microsoft/live-share.EphemeralEventScope" />, IErrorEvent&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.addListener
  - name: captureRejections
    uid: '@microsoft/live-share.EphemeralEventScope.captureRejections'
    package: '@microsoft/live-share'
    summary: Sets or gets the default captureRejection value for all emitters.
    fullName: captureRejections
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejections: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.captureRejections
  - name: captureRejectionSymbol
    uid: '@microsoft/live-share.EphemeralEventScope.captureRejectionSymbol'
    package: '@microsoft/live-share'
    summary: ''
    fullName: captureRejectionSymbol
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejectionSymbol: typeof captureRejectionSymbol'
      return:
        description: ''
        type: typeof captureRejectionSymbol
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.captureRejectionSymbol
  - name: defaultMaxListeners
    uid: '@microsoft/live-share.EphemeralEventScope.defaultMaxListeners'
    package: '@microsoft/live-share'
    summary: ''
    fullName: defaultMaxListeners
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.defaultMaxListeners
  - name: errorMonitor
    uid: '@microsoft/live-share.EphemeralEventScope.errorMonitor'
    package: '@microsoft/live-share'
    summary: >-
      This symbol shall be used to install a listener for only monitoring
      `'error'`

      events. Listeners installed using this symbol are called before the
      regular

      `'error'` listeners are called.


      Installing a listener using this symbol does not change the behavior once
      an

      `'error'` event is emitted, therefore the process will still crash if no

      regular `'error'` listener is installed.
    fullName: errorMonitor
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static errorMonitor: typeof errorMonitor'
      return:
        description: ''
        type: typeof errorMonitor
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.errorMonitor
  - name: 'off'
    uid: '@microsoft/live-share.EphemeralEventScope.off'
    package: '@microsoft/live-share'
    summary: ''
    fullName: 'off'
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'off: TypedEventTransform<EphemeralEventScope, IErrorEvent>'
      return:
        description: ''
        type: >-
          TypedEventTransform&lt;<xref
          uid="@microsoft/live-share.EphemeralEventScope" />, IErrorEvent&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.off
  - name: 'on'
    uid: '@microsoft/live-share.EphemeralEventScope.on'
    package: '@microsoft/live-share'
    summary: ''
    fullName: 'on'
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'on: TypedEventTransform<EphemeralEventScope, IErrorEvent>'
      return:
        description: ''
        type: >-
          TypedEventTransform&lt;<xref
          uid="@microsoft/live-share.EphemeralEventScope" />, IErrorEvent&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.on
  - name: once
    uid: '@microsoft/live-share.EphemeralEventScope.once'
    package: '@microsoft/live-share'
    summary: ''
    fullName: once
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'once: TypedEventTransform<EphemeralEventScope, IErrorEvent>'
      return:
        description: ''
        type: >-
          TypedEventTransform&lt;<xref
          uid="@microsoft/live-share.EphemeralEventScope" />, IErrorEvent&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.once
  - name: prependListener
    uid: '@microsoft/live-share.EphemeralEventScope.prependListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: prependListener
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'prependListener: TypedEventTransform<EphemeralEventScope, IErrorEvent>'
      return:
        description: ''
        type: >-
          TypedEventTransform&lt;<xref
          uid="@microsoft/live-share.EphemeralEventScope" />, IErrorEvent&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.prependListener
  - name: prependOnceListener
    uid: '@microsoft/live-share.EphemeralEventScope.prependOnceListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: prependOnceListener
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        prependOnceListener: TypedEventTransform<EphemeralEventScope,
        IErrorEvent>
      return:
        description: ''
        type: >-
          TypedEventTransform&lt;<xref
          uid="@microsoft/live-share.EphemeralEventScope" />, IErrorEvent&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.prependOnceListener
  - name: removeListener
    uid: '@microsoft/live-share.EphemeralEventScope.removeListener'
    package: '@microsoft/live-share'
    summary: ''
    fullName: removeListener
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'removeListener: TypedEventTransform<EphemeralEventScope, IErrorEvent>'
      return:
        description: ''
        type: >-
          TypedEventTransform&lt;<xref
          uid="@microsoft/live-share.EphemeralEventScope" />, IErrorEvent&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.removeListener
inheritedMethods:
  - name: emit(string | symbol, any[])
    uid: '@microsoft/live-share.EphemeralEventScope.emit'
    package: '@microsoft/live-share'
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.


      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[]): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: any[]
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.emit
  - name: eventNames()
    uid: '@microsoft/live-share.EphemeralEventScope.eventNames'
    package: '@microsoft/live-share'
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.

      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventNames(): (string | symbol)[]'
      return:
        description: ''
        type: (string | symbol)[]
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.eventNames
  - name: getEventListeners(_DOMEventTarget | EventEmitter, string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.getEventListeners'
    package: '@microsoft/live-share'
    summary: >-
      Returns a copy of the array of listeners for the event named `eventName`.


      For `EventEmitter`s this behaves exactly the same as calling `.listeners`
      on

      the emitter.


      For `EventTarget`s this is the only way to get the event listeners for the

      event target. This is useful for debugging and diagnostic purposes.


      ```js

      const { getEventListeners, EventEmitter } = require('events');


      {
        const ee = new EventEmitter();
        const listener = () => console.log('Events are fun');
        ee.on('foo', listener);
        getEventListeners(ee, 'foo'); // [listener]
      }

      {
        const et = new EventTarget();
        const listener = () => console.log('Events are fun');
        et.addEventListener('foo', listener);
        getEventListeners(et, 'foo'); // [listener]
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getEventListeners(emitter: _DOMEventTarget |
        EventEmitter, name: string | symbol): Function[]
      parameters:
        - id: emitter
          type: _DOMEventTarget | EventEmitter
          description: ''
        - id: name
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.getEventListeners
  - name: getMaxListeners()
    uid: '@microsoft/live-share.EphemeralEventScope.getMaxListeners'
    package: '@microsoft/live-share'
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      [defaultMaxListeners](xref:@microsoft/live-share.EphemeralEventScope.defaultMaxListeners).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.getMaxListeners
  - name: listenerCount(EventEmitter, string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.listenerCount'
    package: '@microsoft/live-share'
    summary: >-
      A class method that returns the number of listeners for the given
      `eventName`registered on the given `emitter`.


      ```js

      const { EventEmitter, listenerCount } = require('events');

      const myEmitter = new EventEmitter();

      myEmitter.on('event', () => {});

      myEmitter.on('event', () => {});

      console.log(listenerCount(myEmitter, 'event'));

      // Prints: 2

      ```
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Since v3.2.0 - Use `listenerCount` instead.
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter, eventName: string |
        symbol): number
      parameters:
        - id: emitter
          type: EventEmitter
          description: The emitter to query
        - id: eventName
          type: string | symbol
          description: The event name
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.listenerCount
  - name: listenerCount(string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.listenerCount'
    package: '@microsoft/live-share'
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol): number'
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event being listened for
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.listenerCount
  - name: listeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.listeners'
    package: '@microsoft/live-share'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.

      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.listeners
  - name: on(EventEmitter, string, StaticEventEmitterOptions)
    uid: '@microsoft/live-share.EphemeralEventScope.on'
    package: '@microsoft/live-share'
    summary: |-
      ```js
      const { on, EventEmitter } = require('events');

      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo')) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();
      ```

      Returns an `AsyncIterator` that iterates `eventName` events. It will throw
      if the `EventEmitter` emits `'error'`. It removes all listeners when
      exiting the loop. The `value` returned by each iteration is an array
      composed of the emitted event arguments.

      An `AbortSignal` can be used to cancel waiting on events:

      ```js
      const { on, EventEmitter } = require('events');
      const ac = new AbortController();

      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo', { signal: ac.signal })) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();

      process.nextTick(() => ac.abort());
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventEmitter, eventName: string, options?:
        StaticEventEmitterOptions): AsyncIterableIterator<any>
      parameters:
        - id: emitter
          type: EventEmitter
          description: ''
        - id: eventName
          type: string
          description: The name of the event being listened for
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: that iterates `eventName` events emitted by the `emitter`
        type: AsyncIterableIterator&lt;any&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.on
  - name: once(_DOMEventTarget, string, StaticEventEmitterOptions)
    uid: '@microsoft/live-share.EphemeralEventScope.once_1'
    package: '@microsoft/live-share'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: _DOMEventTarget, eventName: string,
        options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: _DOMEventTarget
          description: ''
        - id: eventName
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.once
  - name: once(_NodeEventTarget, string | symbol, StaticEventEmitterOptions)
    uid: '@microsoft/live-share.EphemeralEventScope.once'
    package: '@microsoft/live-share'
    summary: >-
      Creates a `Promise` that is fulfilled when the `EventEmitter` emits the
      given

      event or that is rejected if the `EventEmitter` emits `'error'` while
      waiting.

      The `Promise` will resolve with an array of all the arguments emitted to
      the

      given event.


      This method is intentionally generic and works with the web platform
      [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget)
      interface, which has no special`'error'` event

      semantics and does not listen to the `'error'` event.


      ```js

      const { once, EventEmitter } = require('events');


      async function run() {
        const ee = new EventEmitter();

        process.nextTick(() => {
          ee.emit('myevent', 42);
        });

        const [value] = await once(ee, 'myevent');
        console.log(value);

        const err = new Error('kaboom');
        process.nextTick(() => {
          ee.emit('error', err);
        });

        try {
          await once(ee, 'myevent');
        } catch (err) {
          console.log('error happened', err);
        }
      }


      run();

      ```


      The special handling of the `'error'` event is only used when
      `events.once()`is used to wait for another event. If `events.once()` is
      used to wait for the

      '`error'` event itself, then it is treated as any other kind of event
      without

      special handling:


      ```js

      const { EventEmitter, once } = require('events');


      const ee = new EventEmitter();


      once(ee, 'error')
        .then(([err]) => console.log('ok', err.message))
        .catch((err) => console.log('error', err.message));

      ee.emit('error', new Error('boom'));


      // Prints: ok boom

      ```


      An `AbortSignal` can be used to cancel waiting for the event:


      ```js

      const { EventEmitter, once } = require('events');


      const ee = new EventEmitter();

      const ac = new AbortController();


      async function foo(emitter, event, signal) {
        try {
          await once(emitter, event, { signal });
          console.log('event emitted!');
        } catch (error) {
          if (error.name === 'AbortError') {
            console.error('Waiting for the event was canceled!');
          } else {
            console.error('There was an error', error.message);
          }
        }
      }


      foo(ee, 'foo', ac.signal);

      ac.abort(); // Abort waiting for the event

      ee.emit('foo'); // Prints: Waiting for the event was canceled!

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: _NodeEventTarget, eventName: string |
        symbol, options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: _NodeEventTarget
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.once
  - name: rawListeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.rawListeners'
    package: '@microsoft/live-share'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).

      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.rawListeners
  - name: removeAllListeners(string | symbol)
    uid: '@microsoft/live-share.EphemeralEventScope.removeAllListeners'
    package: '@microsoft/live-share'
    summary: |-
      Removes all listeners, or those of the specified `eventName`.

      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeAllListeners(event?: string | symbol):
        EphemeralEventScope
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share.EphemeralEventScope" />
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.removeAllListeners
  - name: setMaxListeners(number)
    uid: '@microsoft/live-share.EphemeralEventScope.setMaxListeners'
    package: '@microsoft/live-share'
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): EphemeralEventScope'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share.EphemeralEventScope" />
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.setMaxListeners
  - name: setMaxListeners(number, (_DOMEventTarget | EventEmitter)[])
    uid: '@microsoft/live-share.EphemeralEventScope.setMaxListeners'
    package: '@microsoft/live-share'
    summary: |-
      ```js
      const {
        setMaxListeners,
        EventEmitter
      } = require('events');

      const target = new EventTarget();
      const emitter = new EventEmitter();

      setMaxListeners(5, target, emitter);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function setMaxListeners(n?: number, eventTargets:
        (_DOMEventTarget | EventEmitter)[])
      parameters:
        - id: 'n'
          type: number
          description: >-
            A non-negative number. The maximum number of listeners per
            `EventTarget` event.
        - id: eventTargets
          type: (_DOMEventTarget | EventEmitter)[]
          description: ''
    inheritanceDescription: <b>Inherited From</b> TypedEventEmitter.setMaxListeners
methods:
  - name: offEvent<TEvent>(string, EphemeralEventListener<TEvent>)
    uid: '@microsoft/live-share.EphemeralEventScope.offEvent'
    package: '@microsoft/live-share'
    summary: Un-registers a listener for a named event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function offEvent<TEvent>(eventName: string, listener:
        EphemeralEventListener<TEvent>): EphemeralEventScope
      parameters:
        - id: eventName
          type: string
          description: Name of event to un-register.
        - id: listener
          type: >-
            <xref uid="@microsoft/live-share.EphemeralEventListener"
            />&lt;TEvent&gt;
          description: Function that was originally passed to `onEvent()`.
      return:
        description: ''
        type: <xref uid="@microsoft/live-share.EphemeralEventScope" />
  - name: onEvent<TEvent>(string, EphemeralEventListener<TEvent>)
    uid: '@microsoft/live-share.EphemeralEventScope.onEvent'
    package: '@microsoft/live-share'
    summary: Registers a listener for a named event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onEvent<TEvent>(eventName: string, listener:
        EphemeralEventListener<TEvent>): EphemeralEventScope
      parameters:
        - id: eventName
          type: string
          description: Name of event to listen for.
        - id: listener
          type: >-
            <xref uid="@microsoft/live-share.EphemeralEventListener"
            />&lt;TEvent&gt;
          description: Function to call when the named event is sent or received.
      return:
        description: ''
        type: <xref uid="@microsoft/live-share.EphemeralEventScope" />
  - name: sendEvent<TEvent>(string, Partial<TEvent>)
    uid: '@microsoft/live-share.EphemeralEventScope.sendEvent'
    package: '@microsoft/live-share'
    summary: Sends an event to other event scope instances for the Fluid object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendEvent<TEvent>(eventName: string, evt?: Partial<TEvent>):
        TEvent
      parameters:
        - id: eventName
          type: string
          description: Name of the event to send.
        - id: evt
          type: Partial&lt;TEvent&gt;
          description: |-
            Optional. Partial event object to send. The `IEphemeralEvent.name`,
            `IEphemeralEvent.timestamp`, and `IEphemeralEvent.clientId`
            fields will be automatically populated prior to sending.
      return:
        description: >-
          The full event, including `IEphemeralEvent.name`,

          `IEphemeralEvent.timestamp`, and `IEphemeralEvent.clientId` fields if
          known.
        type: TEvent
extends: TypedEventEmitter&lt;IErrorEvent&gt;
