### YamlMime:TSType
name: InkingManager
uid: '@microsoft/live-share-canvas.InkingManager'
package: '@microsoft/live-share-canvas'
summary: >-
  Handles user interaction with a canvas, and manages the rendering of wet and
  dry strokes.
fullName: InkingManager
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: InkingManager(HTMLElement)
    uid: '@microsoft/live-share-canvas.InkingManager.constructor'
    package: '@microsoft/live-share-canvas'
    summary: Creates a new InkingManager instance.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new InkingManager(hostElement: HTMLElement)'
      parameters:
        - id: hostElement
          type: HTMLElement
          description: >-
            The HTML element to host the canvases and other DOM elements handled
            by

            the InkingManager instance. `hostElement` shouldn't have any
            children. The

            InkingManager instance might change its attributes, including its
            style.
properties:
  - name: centerX
    uid: '@microsoft/live-share-canvas.InkingManager.centerX'
    package: '@microsoft/live-share-canvas'
    summary: Gets the horizontal center of the inking surface.
    fullName: centerX
    remarks: ''
    isDeprecated: false
    syntax:
      content: number centerX
      return:
        description: ''
        type: number
  - name: centerY
    uid: '@microsoft/live-share-canvas.InkingManager.centerY'
    package: '@microsoft/live-share-canvas'
    summary: Gets the vertical center of the inking surface.
    fullName: centerY
    remarks: ''
    isDeprecated: false
    syntax:
      content: number centerY
      return:
        description: ''
        type: number
  - name: clientHeight
    uid: '@microsoft/live-share-canvas.InkingManager.clientHeight'
    package: '@microsoft/live-share-canvas'
    summary: Gets the client (screen) height of the inking surface.
    fullName: clientHeight
    remarks: ''
    isDeprecated: false
    syntax:
      content: number clientHeight
      return:
        description: ''
        type: number
  - name: clientWidth
    uid: '@microsoft/live-share-canvas.InkingManager.clientWidth'
    package: '@microsoft/live-share-canvas'
    summary: Gets the client (screen) width of the inking surface.
    fullName: clientWidth
    remarks: ''
    isDeprecated: false
    syntax:
      content: number clientWidth
      return:
        description: ''
        type: number
  - name: enableStrokeModifierHotKeys
    uid: '@microsoft/live-share-canvas.InkingManager.enableStrokeModifierHotKeys'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Configures whether the Ctrl, Shift and Alt keys can be used to alter the
      way strokes

      are drawn using various tools.
    fullName: enableStrokeModifierHotKeys
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static enableStrokeModifierHotKeys: boolean'
      return:
        description: ''
        type: boolean
  - name: ephemeralCanvasRemovalDelay
    uid: '@microsoft/live-share-canvas.InkingManager.ephemeralCanvasRemovalDelay'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Configures the amount of time an ephemeral canvas (i.e. a canvas that
      renders ephemeral

      strokes) remains ready for new strokes before being faded out and removed.
    fullName: ephemeralCanvasRemovalDelay
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ephemeralCanvasRemovalDelay: number'
      return:
        description: ''
        type: number
  - name: eraserSize
    uid: '@microsoft/live-share-canvas.InkingManager.eraserSize'
    package: '@microsoft/live-share-canvas'
    summary: The size of the eraser.
    fullName: eraserSize
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'eraserSize: number'
      return:
        description: ''
        type: number
  - name: highlighterBrush
    uid: '@microsoft/live-share-canvas.InkingManager.highlighterBrush'
    package: '@microsoft/live-share-canvas'
    summary: Gets the highlighter brush.
    fullName: highlighterBrush
    remarks: ''
    isDeprecated: false
    syntax:
      content: IBrush highlighterBrush
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.IBrush" />
  - name: hostElement
    uid: '@microsoft/live-share-canvas.InkingManager.hostElement'
    package: '@microsoft/live-share-canvas'
    summary: Gets the DOM element that hosts the inking surface.
    fullName: hostElement
    remarks: ''
    isDeprecated: false
    syntax:
      content: HTMLElement hostElement
      return:
        description: ''
        type: HTMLElement
  - name: inputProvider
    uid: '@microsoft/live-share-canvas.InkingManager.inputProvider'
    package: '@microsoft/live-share-canvas'
    summary: |-
      Gets the input provider object the inking surface receives
      pointer events from.
    fullName: inputProvider
    remarks: ''
    isDeprecated: false
    syntax:
      content: InputProvider inputProvider
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InputProvider" />
  - name: laserPointerBrush
    uid: '@microsoft/live-share-canvas.InkingManager.laserPointerBrush'
    package: '@microsoft/live-share-canvas'
    summary: Gets the laser pointer brush.
    fullName: laserPointerBrush
    remarks: ''
    isDeprecated: false
    syntax:
      content: IBrush laserPointerBrush
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.IBrush" />
  - name: lineBrush
    uid: '@microsoft/live-share-canvas.InkingManager.lineBrush'
    package: '@microsoft/live-share-canvas'
    summary: Gets the line brush.
    fullName: lineBrush
    remarks: ''
    isDeprecated: false
    syntax:
      content: IBrush lineBrush
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.IBrush" />
  - name: localClientId
    uid: '@microsoft/live-share-canvas.InkingManager.localClientId'
    package: '@microsoft/live-share-canvas'
    summary: The default client Id of the device running the application.
    fullName: localClientId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static localClientId: string'
      return:
        description: ''
        type: string
  - name: offset
    uid: '@microsoft/live-share-canvas.InkingManager.offset'
    package: '@microsoft/live-share-canvas'
    summary: Gets the viewport offset. Defaults to 0,0.
    fullName: offset
    remarks: ''
    isDeprecated: false
    syntax:
      content: Readonly<IPoint> offset
      return:
        description: ''
        type: Readonly&lt;<xref uid="@microsoft/live-share-canvas.IPoint" />&gt;
  - name: penBrush
    uid: '@microsoft/live-share-canvas.InkingManager.penBrush'
    package: '@microsoft/live-share-canvas'
    summary: Gets the pen brush.
    fullName: penBrush
    remarks: ''
    isDeprecated: false
    syntax:
      content: IBrush penBrush
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.IBrush" />
  - name: referencePoint
    uid: '@microsoft/live-share-canvas.InkingManager.referencePoint'
    package: '@microsoft/live-share-canvas'
    summary: Gets the reference point. Defaults to "center".
    fullName: referencePoint
    remarks: ''
    isDeprecated: false
    syntax:
      content: CanvasReferencePoint referencePoint
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.CanvasReferencePoint" />
  - name: scale
    uid: '@microsoft/live-share-canvas.InkingManager.scale'
    package: '@microsoft/live-share-canvas'
    summary: Gets the scale. Defaults to 1.
    fullName: scale
    remarks: ''
    isDeprecated: false
    syntax:
      content: number scale
      return:
        description: ''
        type: number
  - name: tool
    uid: '@microsoft/live-share-canvas.InkingManager.tool'
    package: '@microsoft/live-share-canvas'
    summary: Gets the current tool. Defaults to `InkingTool.Pen`.
    fullName: tool
    remarks: ''
    isDeprecated: false
    syntax:
      content: InkingTool tool
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingTool" />
  - name: viewPort
    uid: '@microsoft/live-share-canvas.InkingManager.viewPort'
    package: '@microsoft/live-share-canvas'
    summary: |-
      Gets inking surface's viewport, according to the current
      reference point, scale and offset.
    fullName: viewPort
    remarks: ''
    isDeprecated: false
    syntax:
      content: IRect viewPort
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.IRect" />
inheritedProperties:
  - name: captureRejections
    uid: '@microsoft/live-share-canvas.InkingManager.captureRejections'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Value:
      [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)


      Change the default `captureRejections` option on all new `EventEmitter`
      objects.
    fullName: captureRejections
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejections: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.captureRejections
  - name: captureRejectionSymbol
    uid: '@microsoft/live-share-canvas.InkingManager.captureRejectionSymbol'
    package: '@microsoft/live-share-canvas'
    summary: |-
      Value: `Symbol.for('nodejs.rejection')`

      See how to write a custom `rejection handler`.
    fullName: captureRejectionSymbol
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejectionSymbol: typeof captureRejectionSymbol'
      return:
        description: ''
        type: typeof captureRejectionSymbol
    inheritanceDescription: <b>Inherited From</b> EventEmitter.captureRejectionSymbol
  - name: defaultMaxListeners
    uid: '@microsoft/live-share-canvas.InkingManager.defaultMaxListeners'
    package: '@microsoft/live-share-canvas'
    summary: >-
      By default, a maximum of `10` listeners can be registered for any single

      event. This limit can be changed for individual `EventEmitter` instances

      using the `emitter.setMaxListeners(n)` method. To change the default

      for _all_`EventEmitter` instances, the
      `events.defaultMaxListeners`property can be used. If this value is not a
      positive number, a `RangeError`is thrown.


      Take caution when setting the `events.defaultMaxListeners` because the

      change affects _all_`EventEmitter` instances, including those created
      before

      the change is made. However, calling `emitter.setMaxListeners(n)` still
      has

      precedence over `events.defaultMaxListeners`.


      This is not a hard limit. The `EventEmitter` instance will allow

      more listeners to be added but will output a trace warning to stderr
      indicating

      that a "possible EventEmitter memory leak" has been detected. For any
      single`EventEmitter`, the `emitter.getMaxListeners()` and
      `emitter.setMaxListeners()`methods can be used to

      temporarily avoid this warning:


      ```js

      import { EventEmitter } from 'node:events';

      const emitter = new EventEmitter();

      emitter.setMaxListeners(emitter.getMaxListeners() + 1);

      emitter.once('event', () => {
        // do stuff
        emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));
      });

      ```


      The `--trace-warnings` command-line flag can be used to display the

      stack trace for such warnings.


      The emitted warning can be inspected with `process.on('warning')` and will

      have the additional `emitter`, `type`, and `count` properties, referring
      to

      the event emitter instance, the event's name and the number of attached

      listeners, respectively.

      Its `name` property is set to `'MaxListenersExceededWarning'`.
    fullName: defaultMaxListeners
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.defaultMaxListeners
  - name: errorMonitor
    uid: '@microsoft/live-share-canvas.InkingManager.errorMonitor'
    package: '@microsoft/live-share-canvas'
    summary: >-
      This symbol shall be used to install a listener for only monitoring
      `'error'`events. Listeners installed using this symbol are called before
      the regular`'error'` listeners are called.


      Installing a listener using this symbol does not change the behavior once
      an`'error'` event is emitted. Therefore, the process will still crash if
      no

      regular `'error'` listener is installed.
    fullName: errorMonitor
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static errorMonitor: typeof errorMonitor'
      return:
        description: ''
        type: typeof errorMonitor
    inheritanceDescription: <b>Inherited From</b> EventEmitter.errorMonitor
inheritedMethods:
  - name: 'addAbortListener(AbortSignal, (event: Event) => void)'
    uid: '@microsoft/live-share-canvas.InkingManager.addAbortListener'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Listens once to the `abort` event on the provided `signal`.


      Listening to the `abort` event on abort signals is unsafe and may

      lead to resource leaks since another third party with the signal can

      call `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change

      this since it would violate the web standard. Additionally, the original

      API makes it easy to forget to remove listeners.


      This API allows safely using `AbortSignal`s in Node.js APIs by solving
      these

      two issues by listening to the event such that `stopImmediatePropagation`
      does

      not prevent the listener from running.


      Returns a disposable so that it may be unsubscribed from more easily.


      ```js

      import { addAbortListener } from 'node:events';


      function example(signal) {
        let disposable;
        try {
          signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
          disposable = addAbortListener(signal, (e) => {
            // Do something when signal is aborted.
          });
        } finally {
          disposable?.[Symbol.dispose]();
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function addAbortListener(signal: AbortSignal, resource: (event:
        Event) => void): Disposable
      parameters:
        - id: signal
          type: AbortSignal
          description: ''
        - id: resource
          type: '(event: Event) =&gt; void'
          description: ''
      return:
        description: Disposable that removes the `abort` listener.
        type: Disposable
    inheritanceDescription: <b>Inherited From</b> EventEmitter.addAbortListener
  - name: 'addListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-canvas.InkingManager.addListener'
    package: '@microsoft/live-share-canvas'
    summary: Alias for `emitter.on(eventName, listener)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): InkingManager
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.addListener
  - name: emit<K>(string | symbol, AnyRest)
    uid: '@microsoft/live-share-canvas.InkingManager.emit'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.


      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      import { EventEmitter } from 'node:events';

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit<K>(eventName: string | symbol, args: AnyRest): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.emit
  - name: eventNames()
    uid: '@microsoft/live-share-canvas.InkingManager.eventNames'
    package: '@microsoft/live-share-canvas'
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.

      ```js
      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventNames(): (string | symbol)[]'
      return:
        description: ''
        type: (string | symbol)[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.eventNames
  - name: >-
      getEventListeners(EventEmitter<DefaultEventMap> | _DOMEventTarget, string
      | symbol)
    uid: '@microsoft/live-share-canvas.InkingManager.getEventListeners'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Returns a copy of the array of listeners for the event named `eventName`.


      For `EventEmitter`s this behaves exactly the same as calling `.listeners`
      on

      the emitter.


      For `EventTarget`s this is the only way to get the event listeners for the

      event target. This is useful for debugging and diagnostic purposes.


      ```js

      import { getEventListeners, EventEmitter } from 'node:events';


      {
        const ee = new EventEmitter();
        const listener = () => console.log('Events are fun');
        ee.on('foo', listener);
        console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]
      }

      {
        const et = new EventTarget();
        const listener = () => console.log('Events are fun');
        et.addEventListener('foo', listener);
        console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getEventListeners(emitter: EventEmitter<DefaultEventMap>
        | _DOMEventTarget, name: string | symbol): Function[]
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt; | _DOMEventTarget
          description: ''
        - id: name
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getEventListeners
  - name: getMaxListeners()
    uid: '@microsoft/live-share-canvas.InkingManager.getMaxListeners'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      [defaultMaxListeners](xref:@microsoft/live-share-canvas.InkingManager.defaultMaxListeners).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: getMaxListeners(EventEmitter<DefaultEventMap> | _DOMEventTarget)
    uid: '@microsoft/live-share-canvas.InkingManager.getMaxListeners'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Returns the currently set max amount of listeners.


      For `EventEmitter`s this behaves exactly the same as calling
      `.getMaxListeners` on

      the emitter.


      For `EventTarget`s this is the only way to get the max event listeners for
      the

      event target. If the number of event handlers on a single EventTarget
      exceeds

      the max set, the EventTarget will print a warning.


      ```js

      import { getMaxListeners, setMaxListeners, EventEmitter } from
      'node:events';


      {
        const ee = new EventEmitter();
        console.log(getMaxListeners(ee)); // 10
        setMaxListeners(11, ee);
        console.log(getMaxListeners(ee)); // 11
      }

      {
        const et = new EventTarget();
        console.log(getMaxListeners(et)); // 10
        setMaxListeners(11, et);
        console.log(getMaxListeners(et)); // 11
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getMaxListeners(emitter: EventEmitter<DefaultEventMap> |
        _DOMEventTarget): number
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt; | _DOMEventTarget
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: listenerCount(EventEmitter<DefaultEventMap>, string | symbol)
    uid: '@microsoft/live-share-canvas.InkingManager.listenerCount'
    package: '@microsoft/live-share-canvas'
    summary: >-
      A class method that returns the number of listeners for the given
      `eventName`registered on the given `emitter`.


      ```js

      import { EventEmitter, listenerCount } from 'node:events';


      const myEmitter = new EventEmitter();

      myEmitter.on('event', () => {});

      myEmitter.on('event', () => {});

      console.log(listenerCount(myEmitter, 'event'));

      // Prints: 2

      ```
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Since v3.2.0 - Use `listenerCount` instead.
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter<DefaultEventMap>,
        eventName: string | symbol): number
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: The emitter to query
        - id: eventName
          type: string | symbol
          description: The event name
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listenerCount<K>(string | symbol, Function)
    uid: '@microsoft/live-share-canvas.InkingManager.listenerCount'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Returns the number of listeners listening for the event named `eventName`.

      If `listener` is provided, it will return how many times the listener is
      found

      in the list of the listeners of the event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listenerCount<K>(eventName: string | symbol, listener?:
        Function): number
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event being listened for
        - id: listener
          type: Function
          description: The event handler function
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listeners<K>(string | symbol)
    uid: '@microsoft/live-share-canvas.InkingManager.listeners'
    package: '@microsoft/live-share-canvas'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.

      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listeners
  - name: 'off<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-canvas.InkingManager.off'
    package: '@microsoft/live-share-canvas'
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): InkingManager
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.off
  - name: on(EventEmitter<DefaultEventMap>, string, StaticEventEmitterOptions)
    uid: '@microsoft/live-share-canvas.InkingManager.on'
    package: '@microsoft/live-share-canvas'
    summary: |-
      ```js
      import { on, EventEmitter } from 'node:events';
      import process from 'node:process';

      const ee = new EventEmitter();

      // Emit later on
      process.nextTick(() => {
        ee.emit('foo', 'bar');
        ee.emit('foo', 42);
      });

      for await (const event of on(ee, 'foo')) {
        // The execution of this inner block is synchronous and it
        // processes one event at a time (even with await). Do not use
        // if concurrent execution is required.
        console.log(event); // prints ['bar'] [42]
      }
      // Unreachable here
      ```

      Returns an `AsyncIterator` that iterates `eventName` events. It will throw
      if the `EventEmitter` emits `'error'`. It removes all listeners when
      exiting the loop. The `value` returned by each iteration is an array
      composed of the emitted event arguments.

      An `AbortSignal` can be used to cancel waiting on events:

      ```js
      import { on, EventEmitter } from 'node:events';
      import process from 'node:process';

      const ac = new AbortController();

      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo', { signal: ac.signal })) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();

      process.nextTick(() => ac.abort());
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventEmitter<DefaultEventMap>, eventName:
        string, options?: StaticEventEmitterOptions): AsyncIterableIterator<any>
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: ''
        - id: eventName
          type: string
          description: The name of the event being listened for
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: that iterates `eventName` events emitted by the `emitter`
        type: AsyncIterableIterator&lt;any&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: 'on<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-canvas.InkingManager.on'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.


      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): InkingManager
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: >-
      once(EventEmitter<DefaultEventMap>, string | symbol,
      StaticEventEmitterOptions)
    uid: '@microsoft/live-share-canvas.InkingManager.once'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Creates a `Promise` that is fulfilled when the `EventEmitter` emits the
      given

      event or that is rejected if the `EventEmitter` emits `'error'` while
      waiting.

      The `Promise` will resolve with an array of all the arguments emitted to
      the

      given event.


      This method is intentionally generic and works with the web platform
      [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget)
      interface, which has no special`'error'` event

      semantics and does not listen to the `'error'` event.


      ```js

      import { once, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ee = new EventEmitter();


      process.nextTick(() => {
        ee.emit('myevent', 42);
      });


      const [value] = await once(ee, 'myevent');

      console.log(value);


      const err = new Error('kaboom');

      process.nextTick(() => {
        ee.emit('error', err);
      });


      try {
        await once(ee, 'myevent');
      } catch (err) {
        console.error('error happened', err);
      }

      ```


      The special handling of the `'error'` event is only used when
      `events.once()`is used to wait for another event. If `events.once()` is
      used to wait for the

      '`error'` event itself, then it is treated as any other kind of event
      without

      special handling:


      ```js

      import { EventEmitter, once } from 'node:events';


      const ee = new EventEmitter();


      once(ee, 'error')
        .then(([err]) => console.log('ok', err.message))
        .catch((err) => console.error('error', err.message));

      ee.emit('error', new Error('boom'));


      // Prints: ok boom

      ```


      An `AbortSignal` can be used to cancel waiting for the event:


      ```js

      import { EventEmitter, once } from 'node:events';


      const ee = new EventEmitter();

      const ac = new AbortController();


      async function foo(emitter, event, signal) {
        try {
          await once(emitter, event, { signal });
          console.log('event emitted!');
        } catch (error) {
          if (error.name === 'AbortError') {
            console.error('Waiting for the event was canceled!');
          } else {
            console.error('There was an error', error.message);
          }
        }
      }


      foo(ee, 'foo', ac.signal);

      ac.abort(); // Abort waiting for the event

      ee.emit('foo'); // Prints: Waiting for the event was canceled!

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: EventEmitter<DefaultEventMap>, eventName:
        string | symbol, options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: once(_DOMEventTarget, string, StaticEventEmitterOptions)
    uid: '@microsoft/live-share-canvas.InkingManager.once_1'
    package: '@microsoft/live-share-canvas'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: _DOMEventTarget, eventName: string,
        options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: _DOMEventTarget
          description: ''
        - id: eventName
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: 'once<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-canvas.InkingManager.once'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.


      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function once<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): InkingManager
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: 'prependListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-canvas.InkingManager.prependListener'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.


      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): InkingManager
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependListener
  - name: 'prependOnceListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-canvas.InkingManager.prependOnceListener'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.


      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener<K>(eventName: string | symbol, listener:
        (args: any[]) => void): InkingManager
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependOnceListener
  - name: rawListeners<K>(string | symbol)
    uid: '@microsoft/live-share-canvas.InkingManager.rawListeners'
    package: '@microsoft/live-share-canvas'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).

      ```js
      import { EventEmitter } from 'node:events';
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rawListeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.rawListeners
  - name: removeAllListeners(string | symbol)
    uid: '@microsoft/live-share-canvas.InkingManager.removeAllListeners'
    package: '@microsoft/live-share-canvas'
    summary: |-
      Removes all listeners, or those of the specified `eventName`.

      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(eventName?: string | symbol): InkingManager'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeAllListeners
  - name: 'removeListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@microsoft/live-share-canvas.InkingManager.removeListener'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.


      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      import { EventEmitter } from 'node:events';

      class MyEmitter extends EventEmitter {}

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      import { EventEmitter } from 'node:events';

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): InkingManager
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeListener
  - name: setMaxListeners(number)
    uid: '@microsoft/live-share-canvas.InkingManager.setMaxListeners'
    package: '@microsoft/live-share-canvas'
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): InkingManager'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/live-share-canvas.InkingManager" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
  - name: >-
      setMaxListeners(number, (EventEmitter<DefaultEventMap> |
      _DOMEventTarget)[])
    uid: '@microsoft/live-share-canvas.InkingManager.setMaxListeners'
    package: '@microsoft/live-share-canvas'
    summary: |-
      ```js
      import { setMaxListeners, EventEmitter } from 'node:events';

      const target = new EventTarget();
      const emitter = new EventEmitter();

      setMaxListeners(5, target, emitter);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function setMaxListeners(n?: number, eventTargets:
        (EventEmitter<DefaultEventMap> | _DOMEventTarget)[])
      parameters:
        - id: 'n'
          type: number
          description: >-
            A non-negative number. The maximum number of listeners per
            `EventTarget` event.
        - id: eventTargets
          type: (EventEmitter&lt;DefaultEventMap&gt; | _DOMEventTarget)[]
          description: ''
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
  - name: '[captureRejectionSymbol]<K>(Error, string | symbol, AnyRest)'
    uid: '@microsoft/live-share-canvas.InkingManager.[captureRejectionSymbol]'
    package: '@microsoft/live-share-canvas'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function [captureRejectionSymbol]<K>(error: Error, event: string |
        symbol, args: AnyRest)
      parameters:
        - id: error
          type: Error
          description: ''
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
    inheritanceDescription: <b>Inherited From</b> EventEmitter.__@captureRejectionSymbol@235
methods:
  - name: activate()
    uid: '@microsoft/live-share-canvas.InkingManager.activate'
    package: '@microsoft/live-share-canvas'
    summary: Starts listening to pointer input.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function activate()
  - name: addStroke(IStroke, IAddRemoveStrokeOptions)
    uid: '@microsoft/live-share-canvas.InkingManager.addStroke'
    package: '@microsoft/live-share-canvas'
    summary: Adds a stroke to the drawing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function addStroke(stroke: IStroke, options?: IAddRemoveStrokeOptions)'
      parameters:
        - id: stroke
          type: <xref uid="@microsoft/live-share-canvas.IStroke" />
          description: |-
            The stroke to add. If a stroke with the same id already exists
            in the drawing, is it replaced.
        - id: options
          type: <xref uid="@microsoft/live-share-canvas.IAddRemoveStrokeOptions" />
          description: |-
            Options allowing the caller to force a re-render and/or block the
            emission of `StrokesAddedEvent`.
  - name: beginUpdate()
    uid: '@microsoft/live-share-canvas.InkingManager.beginUpdate'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Temporarily blocks the emission of `StrokesAddedEvent` and
      `StrokesRemovedEvents` in order

      to batch updates (via `addStroke` and `removeStroke`) into the change log.
      Once the

      updates are done, `endUpdate` must be called.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function beginUpdate()
  - name: >-
      beginWetStroke(StrokeType, StrokeMode, IPointerPoint,
      IStrokeCreationOptions)
    uid: '@microsoft/live-share-canvas.InkingManager.beginWetStroke'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Starts a new wet stroke which will be drawn progressively on the canvas.
      Multiple wet strokes

      can be created at the same time and will not interfere with each other.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginWetStroke(strokeType: StrokeType, strokeKind: StrokeMode,
        startPoint: IPointerPoint, options?: IStrokeCreationOptions): IWetStroke
      parameters:
        - id: strokeType
          type: <xref uid="@microsoft/live-share-canvas.StrokeType" />
          description: The type of the stroke to start.
        - id: strokeKind
          type: <xref uid="@microsoft/live-share-canvas.StrokeMode" />
          description: The kind of stroke to start.
        - id: startPoint
          type: <xref uid="@microsoft/live-share-canvas.IPointerPoint" />
          description: The starting point of the stroke.
        - id: options
          type: <xref uid="@microsoft/live-share-canvas.IStrokeCreationOptions" />
          description: Creation options, such as id, points, brush...
      return:
        description: An IWetStroke object representing the ongoing stroke.
        type: <xref uid="@microsoft/live-share-canvas.IWetStroke" />
  - name: clear()
    uid: '@microsoft/live-share-canvas.InkingManager.clear'
    package: '@microsoft/live-share-canvas'
    summary: Clears the canvas.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function clear()
  - name: deactivate()
    uid: '@microsoft/live-share-canvas.InkingManager.deactivate'
    package: '@microsoft/live-share-canvas'
    summary: Stops listening to pointer input.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function deactivate()
  - name: endUpdate()
    uid: '@microsoft/live-share-canvas.InkingManager.endUpdate'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Unblocks the emission of update events and flushes the change log, leading
      to a single

      `StrokesAddedEvent` and/or a single `StrokesRemovedEvent`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function endUpdate()
  - name: erase(IPoint)
    uid: '@microsoft/live-share-canvas.InkingManager.erase'
    package: '@microsoft/live-share-canvas'
    summary: Entirely removes any strokes that intersect with the eraser rectangle.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function erase(p: IPoint)'
      parameters:
        - id: p
          type: <xref uid="@microsoft/live-share-canvas.IPoint" />
          description: |-
            The center of the eraser rectangle. The size of the rectangle is
            determined by the `eraserSize` property.
  - name: exportRaw()
    uid: '@microsoft/live-share-canvas.InkingManager.exportRaw'
    package: '@microsoft/live-share-canvas'
    summary: Exports the current drawing as a collection of raw strokes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function exportRaw(): IRawStroke[]'
      return:
        description: A collection or raw strokes.
        type: <xref uid="@microsoft/live-share-canvas.IRawStroke" />[]
  - name: exportSVG()
    uid: '@microsoft/live-share-canvas.InkingManager.exportSVG'
    package: '@microsoft/live-share-canvas'
    summary: Exports the current drawing to an SVG.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function exportSVG(): string'
      return:
        description: A serialized SVG string.
        type: string
  - name: getStroke(string)
    uid: '@microsoft/live-share-canvas.InkingManager.getStroke'
    package: '@microsoft/live-share-canvas'
    summary: Retrieves an existing stroke from the drawing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getStroke(id: string): undefined | IStroke'
      parameters:
        - id: id
          type: string
          description: The id of the stroke to retrieve.
      return:
        description: The stroke with the specified id.
        type: undefined | <xref uid="@microsoft/live-share-canvas.IStroke" />
  - name: importRaw(IRawStroke[])
    uid: '@microsoft/live-share-canvas.InkingManager.importRaw'
    package: '@microsoft/live-share-canvas'
    summary: Imports (adds) the specified strokes into the drawing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function importRaw(rawStrokes: IRawStroke[])'
      parameters:
        - id: rawStrokes
          type: <xref uid="@microsoft/live-share-canvas.IRawStroke" />[]
          description: The strokes to import.
  - name: pointErase(IPoint)
    uid: '@microsoft/live-share-canvas.InkingManager.pointErase'
    package: '@microsoft/live-share-canvas'
    summary: Erases portions of strokes that intersect with the eraser rectangle.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function pointErase(p: IPoint)'
      parameters:
        - id: p
          type: <xref uid="@microsoft/live-share-canvas.IPoint" />
          description: |-
            The center of the eraser rectangle. The size of the rectangle is
            determined by the `eraserSize` property.
  - name: removeStroke(string, IAddRemoveStrokeOptions)
    uid: '@microsoft/live-share-canvas.InkingManager.removeStroke'
    package: '@microsoft/live-share-canvas'
    summary: Removes a stroke from the drawing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeStroke(id: string, options?: IAddRemoveStrokeOptions)'
      parameters:
        - id: id
          type: string
          description: |-
            The id of the stroke to remove. If the stroke doesn't exist, nothing
            happens.
        - id: options
          type: <xref uid="@microsoft/live-share-canvas.IAddRemoveStrokeOptions" />
          description: |-
            Options allowing the caller to force a re-render and/or block the
            emission of `StrokesRemovedEvent`.
  - name: screenToViewport(IPoint)
    uid: '@microsoft/live-share-canvas.InkingManager.screenToViewport'
    package: '@microsoft/live-share-canvas'
    summary: Converts screen coordinates to viewport coordinates.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function screenToViewport(p: IPoint): IPoint'
      parameters:
        - id: p
          type: <xref uid="@microsoft/live-share-canvas.IPoint" />
          description: The point to convert.
      return:
        description: The converted point.
        type: <xref uid="@microsoft/live-share-canvas.IPoint" />
  - name: setInputFilters(InputFilter[])
    uid: '@microsoft/live-share-canvas.InkingManager.setInputFilters'
    package: '@microsoft/live-share-canvas'
    summary: >-
      Sets the input filters to use with this InkingManager instance. By
      default, a jitter

      reduction filter is used.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setInputFilters(inputFilters?: InputFilter[])'
      parameters:
        - id: inputFilters
          type: <xref uid="@microsoft/live-share-canvas.InputFilter" />[]
          description: |-
            The input filters to use, in the order provided. If `undefined` is
            passed, the default input filters are used.
  - name: viewportToScreen(IPoint)
    uid: '@microsoft/live-share-canvas.InkingManager.viewportToScreen'
    package: '@microsoft/live-share-canvas'
    summary: Converts viewport coordinates to screen coordinates.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function viewportToScreen(p: IPoint): IPoint'
      parameters:
        - id: p
          type: <xref uid="@microsoft/live-share-canvas.IPoint" />
          description: The point to convert.
      return:
        description: The converted point.
        type: <xref uid="@microsoft/live-share-canvas.IPoint" />
extends: EventEmitter
