### YamlMime:TSPackage
uid: '@microsoft/teamsfx'
name: '@microsoft/teamsfx'
summary: ''
type: package
enums:
  - '@microsoft/teamsfx.ErrorCode'
  - '@microsoft/teamsfx.LogLevel'
  - '@microsoft/teamsfx.ResourceType'
classes:
  - '@microsoft/teamsfx.DefaultTediousConnectionConfiguration'
  - '@microsoft/teamsfx.ErrorWithCode'
  - '@microsoft/teamsfx.M365TenantCredential'
  - '@microsoft/teamsfx.MsGraphAuthProvider'
  - '@microsoft/teamsfx.OnBehalfOfUserCredential'
  - '@microsoft/teamsfx.TeamsBotSsoPrompt'
  - '@microsoft/teamsfx.TeamsUserCredential'
interfaces:
  - '@microsoft/teamsfx.AuthenticationConfiguration'
  - '@microsoft/teamsfx.Configuration'
  - '@microsoft/teamsfx.GetTokenOptions'
  - '@microsoft/teamsfx.Logger'
  - '@microsoft/teamsfx.ResourceConfiguration'
  - '@microsoft/teamsfx.TeamsBotSsoPromptSettings'
  - '@microsoft/teamsfx.TeamsBotSsoPromptTokenResponse'
  - '@microsoft/teamsfx.TokenCredential'
  - '@microsoft/teamsfx.UserInfo'
typeAliases:
  - '@microsoft/teamsfx.LogFunction'
functions:
  - name: createMicrosoftGraphClient(TokenCredential, string | string[])
    uid: '@microsoft/teamsfx.createMicrosoftGraphClient'
    package: '@microsoft/teamsfx'
    summary: |+
      Get Microsoft graph client.

      **Example**

      Get Microsoft graph client by TokenCredential
      ```typescript
      // Sso token example (Azure Function)
      const ssoToken = "YOUR_TOKEN_STRING";
      const options = {"AAD_APP_ID", "AAD_APP_SECRET"};
      const credential = new OnBehalfOfAADUserCredential(ssoToken, options);
      const graphClient = await createMicrosoftGraphClient(credential);
      const profile = await graphClient.api("/me").get();

      // TeamsBotSsoPrompt example (Bot Application)
      const requiredScopes = ["User.Read"];
      const config: Configuration = {
         loginUrl: loginUrl,
         clientId: clientId,
         clientSecret: clientSecret,
         tenantId: tenantId
      };
      const prompt = new TeamsBotSsoPrompt(dialogId, {
         config: config
         scopes: '["User.Read"],
      });
      this.addDialog(prompt);

      const oboCredential = new OnBehalfOfAADUserCredential(
       getUserId(dialogContext),
       {
         clientId: "AAD_APP_ID",
         clientSecret: "AAD_APP_SECRET"
       });
      try {
         const graphClient = await createMicrosoftGraphClient(credential);
         const profile = await graphClient.api("/me").get();
      } catch (e) {
         dialogContext.beginDialog(dialogId);
         return Dialog.endOfTurn();
      }
      ```

    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: >-
        function createMicrosoftGraphClient(credential: TokenCredential,
        scopes?: string | string[]): Client
      parameters:
        - id: credential
          type: <xref uid="@microsoft/teamsfx.TokenCredential" />
          description: token credential instance.
        - id: scopes
          type: string | string[]
          description: >-
            The array of Microsoft Token scope of access. Default value is
            `[.default]`.
      return:
        description: Graph client with specified scopes.
        type: Client
  - name: getAuthenticationConfiguration()
    uid: '@microsoft/teamsfx.getAuthenticationConfiguration'
    package: '@microsoft/teamsfx'
    summary: Get configuration for authentication.
    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: >-
        function getAuthenticationConfiguration(): AuthenticationConfiguration |
        undefined
      return:
        description: >-
          Authentication configuration from global configuration instance, the
          value may be undefined if no authentication config exists in current
          environment.
        type: >-
          <xref uid="@microsoft/teamsfx.AuthenticationConfiguration" /> |
          undefined
  - name: getLogLevel()
    uid: '@microsoft/teamsfx.getLogLevel'
    package: '@microsoft/teamsfx'
    summary: Get log level.
    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: 'function getLogLevel(): LogLevel | undefined'
      return:
        description: Log level
        type: <xref uid="@microsoft/teamsfx.LogLevel" /> | undefined
  - name: getResourceConfiguration(ResourceType, string)
    uid: '@microsoft/teamsfx.getResourceConfiguration'
    package: '@microsoft/teamsfx'
    summary: Get configuration for a specific resource.
    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: >-
        function getResourceConfiguration(resourceType: ResourceType,
        resourceName?: string): {[index: string]: any}
      parameters:
        - id: resourceType
          type: <xref uid="@microsoft/teamsfx.ResourceType" />
          description: The type of resource
        - id: resourceName
          type: string
          description: The name of resource, default value is "default".
      return:
        description: >-
          Resource configuration for target resource from global configuration
          instance.
        type: '{[index: string]: any}'
  - name: loadConfiguration(Configuration)
    uid: '@microsoft/teamsfx.loadConfiguration'
    package: '@microsoft/teamsfx'
    summary: >-
      Initialize configuration from environment variables or configuration
      object and set the global instance
    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: 'function loadConfiguration(configuration?: Configuration)'
      parameters:
        - id: configuration
          type: <xref uid="@microsoft/teamsfx.Configuration" />
          description: >-
            Optional configuration that overrides the default configuration
            values. The override depth is 1.
  - name: setLogFunction(LogFunction)
    uid: '@microsoft/teamsfx.setLogFunction'
    package: '@microsoft/teamsfx'
    summary: >+
      Set custom log function. Use the function if it's set. Priority is lower
      than setLogger.


      **Example**


      ```typescript

      setLogFunction((level: LogLevel, message: string) => {
        if (level === LogLevel.Error) {
          console.log(message);
        }
      });

      ```

    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: 'function setLogFunction(logFunction?: LogFunction)'
      parameters:
        - id: logFunction
          type: <xref uid="@microsoft/teamsfx.LogFunction" />
          description: >-
            custom log function. If it's undefined, custom log function will be
            cleared.
  - name: setLogLevel(LogLevel)
    uid: '@microsoft/teamsfx.setLogLevel'
    package: '@microsoft/teamsfx'
    summary: Update log level helper.
    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: 'function setLogLevel(level: LogLevel)'
      parameters:
        - id: level
          type: <xref uid="@microsoft/teamsfx.LogLevel" />
          description: log level in configuration
  - name: setLogger(Logger)
    uid: '@microsoft/teamsfx.setLogger'
    package: '@microsoft/teamsfx'
    summary: >+
      Set custom logger. Use the output functions if it's set. Priority is
      higher than setLogFunction.


      **Example**


      ```typescript

      setLogger({
        verbose: console.debug,
        info: console.info,
        warn: console.warn,
        error: console.error,
      });

      ```

    remarks: ''
    previewState: beta
    isDeprecated: false
    syntax:
      content: 'function setLogger(logger?: Logger)'
      parameters:
        - id: logger
          type: <xref uid="@microsoft/teamsfx.Logger" />
          description: custom logger. If it's undefined, custom logger will be cleared.
