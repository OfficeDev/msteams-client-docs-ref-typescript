### YamlMime:UniversalReference
items:
  - uid: botbuilder-teams.TeamsChatConnector
    name: TeamsChatConnector
    fullName: TeamsChatConnector
    children:
      - botbuilder-teams.TeamsChatConnector.fetchChannelList
      - botbuilder-teams.TeamsChatConnector.fetchMemberList
      - botbuilder-teams.TeamsChatConnector.fetchMembers
      - botbuilder-teams.TeamsChatConnector.fetchTeamInfo
      - botbuilder-teams.TeamsChatConnector.onO365ConnectorCardAction
      - botbuilder-teams.TeamsChatConnector.onQuery
      - botbuilder-teams.TeamsChatConnector.onQuerySettingsUrl
      - botbuilder-teams.TeamsChatConnector.onSelectItem
      - botbuilder-teams.TeamsChatConnector.onSettingsUpdate
      - botbuilder-teams.TeamsChatConnector.onSigninStateVerification
      - botbuilder-teams.TeamsChatConnector.queryInvokeName
      - botbuilder-teams.TeamsChatConnector.querySettingUrlInvokeName
      - botbuilder-teams.TeamsChatConnector.resetAllowedTenants
      - botbuilder-teams.TeamsChatConnector.setAllowedTenants
      - botbuilder-teams.TeamsChatConnector.settingInvokeName
      - botbuilder-teams.TeamsChatConnector.startReplyChain
      - botbuilder-teams.TeamsChatConnector.constructor
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: ChatConnector
    package: botbuilder-teams
  - uid: botbuilder-teams.TeamsChatConnector.fetchChannelList
    name: fetchChannelList
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Return a list of conversations in a team
       @param {string} serverUrl - Server url is composed of baseUrl and cloud name, remember to find your correct cloud name in session or the function will not find the team.
       @param {string} teamId - The team id, you can look it up in session object.
       @param {function} callback - This callback returns err or result.
    syntax:
      content: >-
        function fetchChannelList(serverUrl: string, teamId: string, callback:
        (err: Error, result: ChannelInfo[]) => void)
      parameters:
        - id: serverUrl
          type:
            - string
          description: ''
        - id: teamId
          type:
            - string
          description: ''
        - id: callback
          type:
            - '(err: Error, result: ChannelInfo[]) => void'
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.fetchMemberList
    name: fetchMemberList
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      @deprecated Since version 0.1.2 Will be deleted in version 0.1.5. Use
      fetchMembers(serverUrl, conversationId, callback).
       Return a list of members in a conversation or channel
       @param {string} serverUrl - Server url is composed of baseUrl and cloud name, remember to find your correct cloud name in session or the function will not find the team.
       @param {string} conversationId - The conversation id or channel id, you can look it up in session object.
       @param {string} tenantId - The tenantId, you can look it up in session object.
       @param {function} callback - This callback returns err or result.
    syntax:
      content: >-
        function fetchMemberList(serverUrl: string, conversationId: string,
        tenantId: string, callback: (err: Error, result: ChannelAccount[]) =>
        void)
      parameters:
        - id: serverUrl
          type:
            - string
          description: ''
        - id: conversationId
          type:
            - string
          description: ''
        - id: tenantId
          type:
            - string
          description: ''
        - id: callback
          type:
            - '(err: Error, result: ChannelAccount[]) => void'
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.fetchMembers
    name: fetchMembers
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Return a list of members in a team or channel
       @param {string} serverUrl - Server url is composed of baseUrl and cloud name, remember to find your correct cloud name in session or the function will not find the team.
       @param {string} conversationId - The conversation id or channel id, you can look it up in session object.
       @param {function} callback - This callback returns err or result.
    syntax:
      content: >-
        function fetchMembers(serverUrl: string, conversationId: string,
        callback: (err: Error, result: ChannelAccount[]) => void)
      parameters:
        - id: serverUrl
          type:
            - string
          description: ''
        - id: conversationId
          type:
            - string
          description: ''
        - id: callback
          type:
            - '(err: Error, result: ChannelAccount[]) => void'
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.fetchTeamInfo
    name: fetchTeamInfo
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Return info of a team given team id
       @param {string} serverUrl - Server url is composed of baseUrl and cloud name, remember to find your correct cloud name in session or the function will not find the team.
       @param {string} teamId - The team id, you can look it up in session object.
       @param {function} callback - This callback returns err or result.
    syntax:
      content: >-
        function fetchTeamInfo(serverUrl: string, teamId: string, callback:
        (err: Error, result: TeamInfo) => void)
      parameters:
        - id: serverUrl
          type:
            - string
          description: ''
        - id: teamId
          type:
            - string
          description: ''
        - id: callback
          type:
            - '(err: Error, result: TeamInfo) => void'
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.onO365ConnectorCardAction
    name: onO365ConnectorCardAction
    children: []
    type: method
    langs:
      - typeScript
    summary: Set a handler for o365 connector card action execution
    syntax:
      content: >-
        function onO365ConnectorCardAction(handler:
        O365ConnectorCardActionHandlerType)
      parameters:
        - id: handler
          type:
            - botbuilder-teams.O365ConnectorCardActionHandlerType
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.onQuery
    name: onQuery
    children: []
    type: method
    langs:
      - typeScript
    summary: Set a handler by commandId of a compose extension query
    syntax:
      content: >-
        function onQuery(commandId: string, handler:
        ComposeExtensionHandlerType)
      parameters:
        - id: commandId
          type:
            - string
          description: ''
        - id: handler
          type:
            - botbuilder-teams.ComposeExtensionHandlerType
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.onQuerySettingsUrl
    name: onQuerySettingsUrl
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set a handler for compose extension invoke request that queries setting
      url
    syntax:
      content: 'function onQuerySettingsUrl(handler: ComposeExtensionHandlerType)'
      parameters:
        - id: handler
          type:
            - botbuilder-teams.ComposeExtensionHandlerType
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.onSelectItem
    name: onSelectItem
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set a handler for compose extension invoke request made when a search
      result item is selected
    syntax:
      content: 'function onSelectItem(handler: ComposeExtensionHandlerType)'
      parameters:
        - id: handler
          type:
            - botbuilder-teams.ComposeExtensionHandlerType
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.onSettingsUpdate
    name: onSettingsUpdate
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set a handler for compose extension invoke request made after setting flow
      is successfully finished
    syntax:
      content: 'function onSettingsUpdate(handler: ComposeExtensionHandlerType)'
      parameters:
        - id: handler
          type:
            - botbuilder-teams.ComposeExtensionHandlerType
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.onSigninStateVerification
    name: onSigninStateVerification
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set a handler to verify the final state sent by client that is originally
      received from signin web flow when it's finished
    syntax:
      content: >-
        function onSigninStateVerification(handler:
        SigninStateVerificationHandlerType)
      parameters:
        - id: handler
          type:
            - botbuilder-teams.SigninStateVerificationHandlerType
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.queryInvokeName
    name: queryInvokeName
    fullName: queryInvokeName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static queryInvokeName: string'
      return:
        type:
          - string
  - uid: botbuilder-teams.TeamsChatConnector.querySettingUrlInvokeName
    name: querySettingUrlInvokeName
    fullName: querySettingUrlInvokeName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static querySettingUrlInvokeName: string'
      return:
        type:
          - string
  - uid: botbuilder-teams.TeamsChatConnector.resetAllowedTenants
    name: resetAllowedTenants
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reset allowed tenants, ask connector to receive every message sent from
      any source.
    syntax:
      content: function resetAllowedTenants()
      parameters: []
  - uid: botbuilder-teams.TeamsChatConnector.setAllowedTenants
    name: setAllowedTenants
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set the list of allowed tenants. Messages from tenants not on the list
      will be dropped silently.
       @param {array} tenants - Ids of allowed tenants.
    syntax:
      content: 'function setAllowedTenants(tenants: string[])'
      parameters:
        - id: tenants
          type:
            - 'string[]'
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.settingInvokeName
    name: settingInvokeName
    fullName: settingInvokeName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public static settingInvokeName: string'
      return:
        type:
          - string
  - uid: botbuilder-teams.TeamsChatConnector.startReplyChain
    name: startReplyChain
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Return a newly started reply chain address in channel
       @param {string} serverUrl - Server url is composed of baseUrl and cloud name, remember to find your correct cloud name in session or the function will not find the team.
       @param {string} channelId - The channel id, will post in the channel.
       @param {builder.IMessage|builder.IIsMessage} message - The message to post in the channel.
       @param {function} callback - This callback returns err or result.
    syntax:
      content: >-
        function startReplyChain(serverUrl: string, channelId: string, message:
        IMessage | IIsMessage, callback: (err: Error, address:
        IChatConnectorAddress) => void)
      parameters:
        - id: serverUrl
          type:
            - string
          description: ''
        - id: channelId
          type:
            - string
          description: ''
        - id: message
          type:
            - IMessage | IIsMessage
          description: ''
        - id: callback
          type:
            - '(err: Error, address: IChatConnectorAddress) => void'
          description: ''
  - uid: botbuilder-teams.TeamsChatConnector.constructor
    name: TeamsChatConnector
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new TeamsChatConnector(settings?: IChatConnectorSettings)'
      parameters:
        - id: settings
          type:
            - IChatConnectorSettings
          description: ''
          optional: true
references:
  - uid: botbuilder-teams.O365ConnectorCardActionHandlerType
    spec.typeScript:
      - name: O365ConnectorCardActionHandlerType
        fullName: O365ConnectorCardActionHandlerType
        uid: botbuilder-teams.O365ConnectorCardActionHandlerType
  - uid: botbuilder-teams.ComposeExtensionHandlerType
    spec.typeScript:
      - name: ComposeExtensionHandlerType
        fullName: ComposeExtensionHandlerType
        uid: botbuilder-teams.ComposeExtensionHandlerType
  - uid: botbuilder-teams.SigninStateVerificationHandlerType
    spec.typeScript:
      - name: SigninStateVerificationHandlerType
        fullName: SigninStateVerificationHandlerType
        uid: botbuilder-teams.SigninStateVerificationHandlerType
